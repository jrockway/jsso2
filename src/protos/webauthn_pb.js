// source: webauthn.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

var google_protobuf_duration_pb = require('google-protobuf/google/protobuf/duration_pb.js');
goog.object.extend(proto, google_protobuf_duration_pb);
goog.exportSymbol('proto.webauthn.AuthenticatorAssertionResponse', null, global);
goog.exportSymbol('proto.webauthn.AuthenticatorAttestationResponse', null, global);
goog.exportSymbol('proto.webauthn.AuthenticatorResponse', null, global);
goog.exportSymbol('proto.webauthn.AuthenticatorResponse.ResponseCase', null, global);
goog.exportSymbol('proto.webauthn.AuthenticatorSelectionCriteria', null, global);
goog.exportSymbol('proto.webauthn.AuthenticatorSelectionCriteria.AuthenticatorAttachment', null, global);
goog.exportSymbol('proto.webauthn.AuthenticatorSelectionCriteria.UserVerificationRequirement', null, global);
goog.exportSymbol('proto.webauthn.PublicKeyCredential', null, global);
goog.exportSymbol('proto.webauthn.PublicKeyCredentialCreationOptions', null, global);
goog.exportSymbol('proto.webauthn.PublicKeyCredentialCreationOptions.AttestationConveyancePreference', null, global);
goog.exportSymbol('proto.webauthn.PublicKeyCredentialDescriptor', null, global);
goog.exportSymbol('proto.webauthn.PublicKeyCredentialDescriptor.AuthenticatorTransport', null, global);
goog.exportSymbol('proto.webauthn.PublicKeyCredentialParameters', null, global);
goog.exportSymbol('proto.webauthn.PublicKeyCredentialRequestOptions', null, global);
goog.exportSymbol('proto.webauthn.PublicKeyCredentialRpEntity', null, global);
goog.exportSymbol('proto.webauthn.PublicKeyCredentialUserEntity', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.webauthn.PublicKeyCredentialCreationOptions = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.webauthn.PublicKeyCredentialCreationOptions.repeatedFields_, null);
};
goog.inherits(proto.webauthn.PublicKeyCredentialCreationOptions, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.webauthn.PublicKeyCredentialCreationOptions.displayName = 'proto.webauthn.PublicKeyCredentialCreationOptions';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.webauthn.PublicKeyCredentialRequestOptions = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.webauthn.PublicKeyCredentialRequestOptions.repeatedFields_, null);
};
goog.inherits(proto.webauthn.PublicKeyCredentialRequestOptions, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.webauthn.PublicKeyCredentialRequestOptions.displayName = 'proto.webauthn.PublicKeyCredentialRequestOptions';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.webauthn.AuthenticatorSelectionCriteria = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.webauthn.AuthenticatorSelectionCriteria, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.webauthn.AuthenticatorSelectionCriteria.displayName = 'proto.webauthn.AuthenticatorSelectionCriteria';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.webauthn.PublicKeyCredentialDescriptor = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.webauthn.PublicKeyCredentialDescriptor.repeatedFields_, null);
};
goog.inherits(proto.webauthn.PublicKeyCredentialDescriptor, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.webauthn.PublicKeyCredentialDescriptor.displayName = 'proto.webauthn.PublicKeyCredentialDescriptor';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.webauthn.PublicKeyCredentialParameters = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.webauthn.PublicKeyCredentialParameters, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.webauthn.PublicKeyCredentialParameters.displayName = 'proto.webauthn.PublicKeyCredentialParameters';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.webauthn.PublicKeyCredentialRpEntity = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.webauthn.PublicKeyCredentialRpEntity, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.webauthn.PublicKeyCredentialRpEntity.displayName = 'proto.webauthn.PublicKeyCredentialRpEntity';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.webauthn.PublicKeyCredentialUserEntity = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.webauthn.PublicKeyCredentialUserEntity, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.webauthn.PublicKeyCredentialUserEntity.displayName = 'proto.webauthn.PublicKeyCredentialUserEntity';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.webauthn.PublicKeyCredential = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.webauthn.PublicKeyCredential, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.webauthn.PublicKeyCredential.displayName = 'proto.webauthn.PublicKeyCredential';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.webauthn.AuthenticatorResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.webauthn.AuthenticatorResponse.oneofGroups_);
};
goog.inherits(proto.webauthn.AuthenticatorResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.webauthn.AuthenticatorResponse.displayName = 'proto.webauthn.AuthenticatorResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.webauthn.AuthenticatorAttestationResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.webauthn.AuthenticatorAttestationResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.webauthn.AuthenticatorAttestationResponse.displayName = 'proto.webauthn.AuthenticatorAttestationResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.webauthn.AuthenticatorAssertionResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.webauthn.AuthenticatorAssertionResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.webauthn.AuthenticatorAssertionResponse.displayName = 'proto.webauthn.AuthenticatorAssertionResponse';
}

/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.webauthn.PublicKeyCredentialCreationOptions.repeatedFields_ = [4,6];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.webauthn.PublicKeyCredentialCreationOptions.prototype.toObject = function(opt_includeInstance) {
  return proto.webauthn.PublicKeyCredentialCreationOptions.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.webauthn.PublicKeyCredentialCreationOptions} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.webauthn.PublicKeyCredentialCreationOptions.toObject = function(includeInstance, msg) {
  var f, obj = {
    attestation: jspb.Message.getFieldWithDefault(msg, 1, 0),
    authenticatorSelection: (f = msg.getAuthenticatorSelection()) && proto.webauthn.AuthenticatorSelectionCriteria.toObject(includeInstance, f),
    challenge: msg.getChallenge_asB64(),
    excludeCredentialsList: jspb.Message.toObjectList(msg.getExcludeCredentialsList(),
    proto.webauthn.PublicKeyCredentialDescriptor.toObject, includeInstance),
    pubKeyCredParamsList: jspb.Message.toObjectList(msg.getPubKeyCredParamsList(),
    proto.webauthn.PublicKeyCredentialParameters.toObject, includeInstance),
    rp: (f = msg.getRp()) && proto.webauthn.PublicKeyCredentialRpEntity.toObject(includeInstance, f),
    timeout: (f = msg.getTimeout()) && google_protobuf_duration_pb.Duration.toObject(includeInstance, f),
    user: (f = msg.getUser()) && proto.webauthn.PublicKeyCredentialUserEntity.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.webauthn.PublicKeyCredentialCreationOptions}
 */
proto.webauthn.PublicKeyCredentialCreationOptions.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.webauthn.PublicKeyCredentialCreationOptions;
  return proto.webauthn.PublicKeyCredentialCreationOptions.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.webauthn.PublicKeyCredentialCreationOptions} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.webauthn.PublicKeyCredentialCreationOptions}
 */
proto.webauthn.PublicKeyCredentialCreationOptions.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.webauthn.PublicKeyCredentialCreationOptions.AttestationConveyancePreference} */ (reader.readEnum());
      msg.setAttestation(value);
      break;
    case 2:
      var value = new proto.webauthn.AuthenticatorSelectionCriteria;
      reader.readMessage(value,proto.webauthn.AuthenticatorSelectionCriteria.deserializeBinaryFromReader);
      msg.setAuthenticatorSelection(value);
      break;
    case 3:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setChallenge(value);
      break;
    case 4:
      var value = new proto.webauthn.PublicKeyCredentialDescriptor;
      reader.readMessage(value,proto.webauthn.PublicKeyCredentialDescriptor.deserializeBinaryFromReader);
      msg.addExcludeCredentials(value);
      break;
    case 6:
      var value = new proto.webauthn.PublicKeyCredentialParameters;
      reader.readMessage(value,proto.webauthn.PublicKeyCredentialParameters.deserializeBinaryFromReader);
      msg.addPubKeyCredParams(value);
      break;
    case 7:
      var value = new proto.webauthn.PublicKeyCredentialRpEntity;
      reader.readMessage(value,proto.webauthn.PublicKeyCredentialRpEntity.deserializeBinaryFromReader);
      msg.setRp(value);
      break;
    case 8:
      var value = new google_protobuf_duration_pb.Duration;
      reader.readMessage(value,google_protobuf_duration_pb.Duration.deserializeBinaryFromReader);
      msg.setTimeout(value);
      break;
    case 9:
      var value = new proto.webauthn.PublicKeyCredentialUserEntity;
      reader.readMessage(value,proto.webauthn.PublicKeyCredentialUserEntity.deserializeBinaryFromReader);
      msg.setUser(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.webauthn.PublicKeyCredentialCreationOptions.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.webauthn.PublicKeyCredentialCreationOptions.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.webauthn.PublicKeyCredentialCreationOptions} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.webauthn.PublicKeyCredentialCreationOptions.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAttestation();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getAuthenticatorSelection();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.webauthn.AuthenticatorSelectionCriteria.serializeBinaryToWriter
    );
  }
  f = message.getChallenge_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      3,
      f
    );
  }
  f = message.getExcludeCredentialsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      4,
      f,
      proto.webauthn.PublicKeyCredentialDescriptor.serializeBinaryToWriter
    );
  }
  f = message.getPubKeyCredParamsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      6,
      f,
      proto.webauthn.PublicKeyCredentialParameters.serializeBinaryToWriter
    );
  }
  f = message.getRp();
  if (f != null) {
    writer.writeMessage(
      7,
      f,
      proto.webauthn.PublicKeyCredentialRpEntity.serializeBinaryToWriter
    );
  }
  f = message.getTimeout();
  if (f != null) {
    writer.writeMessage(
      8,
      f,
      google_protobuf_duration_pb.Duration.serializeBinaryToWriter
    );
  }
  f = message.getUser();
  if (f != null) {
    writer.writeMessage(
      9,
      f,
      proto.webauthn.PublicKeyCredentialUserEntity.serializeBinaryToWriter
    );
  }
};


/**
 * @enum {number}
 */
proto.webauthn.PublicKeyCredentialCreationOptions.AttestationConveyancePreference = {
  NONE: 0,
  DIRECT: 1,
  INDIRECT: 2
};

/**
 * optional AttestationConveyancePreference attestation = 1;
 * @return {!proto.webauthn.PublicKeyCredentialCreationOptions.AttestationConveyancePreference}
 */
proto.webauthn.PublicKeyCredentialCreationOptions.prototype.getAttestation = function() {
  return /** @type {!proto.webauthn.PublicKeyCredentialCreationOptions.AttestationConveyancePreference} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {!proto.webauthn.PublicKeyCredentialCreationOptions.AttestationConveyancePreference} value
 * @return {!proto.webauthn.PublicKeyCredentialCreationOptions} returns this
 */
proto.webauthn.PublicKeyCredentialCreationOptions.prototype.setAttestation = function(value) {
  return jspb.Message.setProto3EnumField(this, 1, value);
};


/**
 * optional AuthenticatorSelectionCriteria authenticator_selection = 2;
 * @return {?proto.webauthn.AuthenticatorSelectionCriteria}
 */
proto.webauthn.PublicKeyCredentialCreationOptions.prototype.getAuthenticatorSelection = function() {
  return /** @type{?proto.webauthn.AuthenticatorSelectionCriteria} */ (
    jspb.Message.getWrapperField(this, proto.webauthn.AuthenticatorSelectionCriteria, 2));
};


/**
 * @param {?proto.webauthn.AuthenticatorSelectionCriteria|undefined} value
 * @return {!proto.webauthn.PublicKeyCredentialCreationOptions} returns this
*/
proto.webauthn.PublicKeyCredentialCreationOptions.prototype.setAuthenticatorSelection = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.webauthn.PublicKeyCredentialCreationOptions} returns this
 */
proto.webauthn.PublicKeyCredentialCreationOptions.prototype.clearAuthenticatorSelection = function() {
  return this.setAuthenticatorSelection(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.webauthn.PublicKeyCredentialCreationOptions.prototype.hasAuthenticatorSelection = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional bytes challenge = 3;
 * @return {string}
 */
proto.webauthn.PublicKeyCredentialCreationOptions.prototype.getChallenge = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * optional bytes challenge = 3;
 * This is a type-conversion wrapper around `getChallenge()`
 * @return {string}
 */
proto.webauthn.PublicKeyCredentialCreationOptions.prototype.getChallenge_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getChallenge()));
};


/**
 * optional bytes challenge = 3;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getChallenge()`
 * @return {!Uint8Array}
 */
proto.webauthn.PublicKeyCredentialCreationOptions.prototype.getChallenge_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getChallenge()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.webauthn.PublicKeyCredentialCreationOptions} returns this
 */
proto.webauthn.PublicKeyCredentialCreationOptions.prototype.setChallenge = function(value) {
  return jspb.Message.setProto3BytesField(this, 3, value);
};


/**
 * repeated PublicKeyCredentialDescriptor exclude_credentials = 4;
 * @return {!Array<!proto.webauthn.PublicKeyCredentialDescriptor>}
 */
proto.webauthn.PublicKeyCredentialCreationOptions.prototype.getExcludeCredentialsList = function() {
  return /** @type{!Array<!proto.webauthn.PublicKeyCredentialDescriptor>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.webauthn.PublicKeyCredentialDescriptor, 4));
};


/**
 * @param {!Array<!proto.webauthn.PublicKeyCredentialDescriptor>} value
 * @return {!proto.webauthn.PublicKeyCredentialCreationOptions} returns this
*/
proto.webauthn.PublicKeyCredentialCreationOptions.prototype.setExcludeCredentialsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 4, value);
};


/**
 * @param {!proto.webauthn.PublicKeyCredentialDescriptor=} opt_value
 * @param {number=} opt_index
 * @return {!proto.webauthn.PublicKeyCredentialDescriptor}
 */
proto.webauthn.PublicKeyCredentialCreationOptions.prototype.addExcludeCredentials = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 4, opt_value, proto.webauthn.PublicKeyCredentialDescriptor, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.webauthn.PublicKeyCredentialCreationOptions} returns this
 */
proto.webauthn.PublicKeyCredentialCreationOptions.prototype.clearExcludeCredentialsList = function() {
  return this.setExcludeCredentialsList([]);
};


/**
 * repeated PublicKeyCredentialParameters pub_key_cred_params = 6;
 * @return {!Array<!proto.webauthn.PublicKeyCredentialParameters>}
 */
proto.webauthn.PublicKeyCredentialCreationOptions.prototype.getPubKeyCredParamsList = function() {
  return /** @type{!Array<!proto.webauthn.PublicKeyCredentialParameters>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.webauthn.PublicKeyCredentialParameters, 6));
};


/**
 * @param {!Array<!proto.webauthn.PublicKeyCredentialParameters>} value
 * @return {!proto.webauthn.PublicKeyCredentialCreationOptions} returns this
*/
proto.webauthn.PublicKeyCredentialCreationOptions.prototype.setPubKeyCredParamsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 6, value);
};


/**
 * @param {!proto.webauthn.PublicKeyCredentialParameters=} opt_value
 * @param {number=} opt_index
 * @return {!proto.webauthn.PublicKeyCredentialParameters}
 */
proto.webauthn.PublicKeyCredentialCreationOptions.prototype.addPubKeyCredParams = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 6, opt_value, proto.webauthn.PublicKeyCredentialParameters, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.webauthn.PublicKeyCredentialCreationOptions} returns this
 */
proto.webauthn.PublicKeyCredentialCreationOptions.prototype.clearPubKeyCredParamsList = function() {
  return this.setPubKeyCredParamsList([]);
};


/**
 * optional PublicKeyCredentialRpEntity rp = 7;
 * @return {?proto.webauthn.PublicKeyCredentialRpEntity}
 */
proto.webauthn.PublicKeyCredentialCreationOptions.prototype.getRp = function() {
  return /** @type{?proto.webauthn.PublicKeyCredentialRpEntity} */ (
    jspb.Message.getWrapperField(this, proto.webauthn.PublicKeyCredentialRpEntity, 7));
};


/**
 * @param {?proto.webauthn.PublicKeyCredentialRpEntity|undefined} value
 * @return {!proto.webauthn.PublicKeyCredentialCreationOptions} returns this
*/
proto.webauthn.PublicKeyCredentialCreationOptions.prototype.setRp = function(value) {
  return jspb.Message.setWrapperField(this, 7, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.webauthn.PublicKeyCredentialCreationOptions} returns this
 */
proto.webauthn.PublicKeyCredentialCreationOptions.prototype.clearRp = function() {
  return this.setRp(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.webauthn.PublicKeyCredentialCreationOptions.prototype.hasRp = function() {
  return jspb.Message.getField(this, 7) != null;
};


/**
 * optional google.protobuf.Duration timeout = 8;
 * @return {?proto.google.protobuf.Duration}
 */
proto.webauthn.PublicKeyCredentialCreationOptions.prototype.getTimeout = function() {
  return /** @type{?proto.google.protobuf.Duration} */ (
    jspb.Message.getWrapperField(this, google_protobuf_duration_pb.Duration, 8));
};


/**
 * @param {?proto.google.protobuf.Duration|undefined} value
 * @return {!proto.webauthn.PublicKeyCredentialCreationOptions} returns this
*/
proto.webauthn.PublicKeyCredentialCreationOptions.prototype.setTimeout = function(value) {
  return jspb.Message.setWrapperField(this, 8, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.webauthn.PublicKeyCredentialCreationOptions} returns this
 */
proto.webauthn.PublicKeyCredentialCreationOptions.prototype.clearTimeout = function() {
  return this.setTimeout(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.webauthn.PublicKeyCredentialCreationOptions.prototype.hasTimeout = function() {
  return jspb.Message.getField(this, 8) != null;
};


/**
 * optional PublicKeyCredentialUserEntity user = 9;
 * @return {?proto.webauthn.PublicKeyCredentialUserEntity}
 */
proto.webauthn.PublicKeyCredentialCreationOptions.prototype.getUser = function() {
  return /** @type{?proto.webauthn.PublicKeyCredentialUserEntity} */ (
    jspb.Message.getWrapperField(this, proto.webauthn.PublicKeyCredentialUserEntity, 9));
};


/**
 * @param {?proto.webauthn.PublicKeyCredentialUserEntity|undefined} value
 * @return {!proto.webauthn.PublicKeyCredentialCreationOptions} returns this
*/
proto.webauthn.PublicKeyCredentialCreationOptions.prototype.setUser = function(value) {
  return jspb.Message.setWrapperField(this, 9, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.webauthn.PublicKeyCredentialCreationOptions} returns this
 */
proto.webauthn.PublicKeyCredentialCreationOptions.prototype.clearUser = function() {
  return this.setUser(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.webauthn.PublicKeyCredentialCreationOptions.prototype.hasUser = function() {
  return jspb.Message.getField(this, 9) != null;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.webauthn.PublicKeyCredentialRequestOptions.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.webauthn.PublicKeyCredentialRequestOptions.prototype.toObject = function(opt_includeInstance) {
  return proto.webauthn.PublicKeyCredentialRequestOptions.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.webauthn.PublicKeyCredentialRequestOptions} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.webauthn.PublicKeyCredentialRequestOptions.toObject = function(includeInstance, msg) {
  var f, obj = {
    challenge: msg.getChallenge_asB64(),
    allowedCredentialsList: jspb.Message.toObjectList(msg.getAllowedCredentialsList(),
    proto.webauthn.PublicKeyCredentialDescriptor.toObject, includeInstance),
    timeout: (f = msg.getTimeout()) && google_protobuf_duration_pb.Duration.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.webauthn.PublicKeyCredentialRequestOptions}
 */
proto.webauthn.PublicKeyCredentialRequestOptions.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.webauthn.PublicKeyCredentialRequestOptions;
  return proto.webauthn.PublicKeyCredentialRequestOptions.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.webauthn.PublicKeyCredentialRequestOptions} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.webauthn.PublicKeyCredentialRequestOptions}
 */
proto.webauthn.PublicKeyCredentialRequestOptions.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setChallenge(value);
      break;
    case 2:
      var value = new proto.webauthn.PublicKeyCredentialDescriptor;
      reader.readMessage(value,proto.webauthn.PublicKeyCredentialDescriptor.deserializeBinaryFromReader);
      msg.addAllowedCredentials(value);
      break;
    case 3:
      var value = new google_protobuf_duration_pb.Duration;
      reader.readMessage(value,google_protobuf_duration_pb.Duration.deserializeBinaryFromReader);
      msg.setTimeout(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.webauthn.PublicKeyCredentialRequestOptions.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.webauthn.PublicKeyCredentialRequestOptions.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.webauthn.PublicKeyCredentialRequestOptions} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.webauthn.PublicKeyCredentialRequestOptions.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getChallenge_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
  f = message.getAllowedCredentialsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.webauthn.PublicKeyCredentialDescriptor.serializeBinaryToWriter
    );
  }
  f = message.getTimeout();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      google_protobuf_duration_pb.Duration.serializeBinaryToWriter
    );
  }
};


/**
 * optional bytes challenge = 1;
 * @return {string}
 */
proto.webauthn.PublicKeyCredentialRequestOptions.prototype.getChallenge = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes challenge = 1;
 * This is a type-conversion wrapper around `getChallenge()`
 * @return {string}
 */
proto.webauthn.PublicKeyCredentialRequestOptions.prototype.getChallenge_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getChallenge()));
};


/**
 * optional bytes challenge = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getChallenge()`
 * @return {!Uint8Array}
 */
proto.webauthn.PublicKeyCredentialRequestOptions.prototype.getChallenge_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getChallenge()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.webauthn.PublicKeyCredentialRequestOptions} returns this
 */
proto.webauthn.PublicKeyCredentialRequestOptions.prototype.setChallenge = function(value) {
  return jspb.Message.setProto3BytesField(this, 1, value);
};


/**
 * repeated PublicKeyCredentialDescriptor allowed_credentials = 2;
 * @return {!Array<!proto.webauthn.PublicKeyCredentialDescriptor>}
 */
proto.webauthn.PublicKeyCredentialRequestOptions.prototype.getAllowedCredentialsList = function() {
  return /** @type{!Array<!proto.webauthn.PublicKeyCredentialDescriptor>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.webauthn.PublicKeyCredentialDescriptor, 2));
};


/**
 * @param {!Array<!proto.webauthn.PublicKeyCredentialDescriptor>} value
 * @return {!proto.webauthn.PublicKeyCredentialRequestOptions} returns this
*/
proto.webauthn.PublicKeyCredentialRequestOptions.prototype.setAllowedCredentialsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.webauthn.PublicKeyCredentialDescriptor=} opt_value
 * @param {number=} opt_index
 * @return {!proto.webauthn.PublicKeyCredentialDescriptor}
 */
proto.webauthn.PublicKeyCredentialRequestOptions.prototype.addAllowedCredentials = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.webauthn.PublicKeyCredentialDescriptor, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.webauthn.PublicKeyCredentialRequestOptions} returns this
 */
proto.webauthn.PublicKeyCredentialRequestOptions.prototype.clearAllowedCredentialsList = function() {
  return this.setAllowedCredentialsList([]);
};


/**
 * optional google.protobuf.Duration timeout = 3;
 * @return {?proto.google.protobuf.Duration}
 */
proto.webauthn.PublicKeyCredentialRequestOptions.prototype.getTimeout = function() {
  return /** @type{?proto.google.protobuf.Duration} */ (
    jspb.Message.getWrapperField(this, google_protobuf_duration_pb.Duration, 3));
};


/**
 * @param {?proto.google.protobuf.Duration|undefined} value
 * @return {!proto.webauthn.PublicKeyCredentialRequestOptions} returns this
*/
proto.webauthn.PublicKeyCredentialRequestOptions.prototype.setTimeout = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.webauthn.PublicKeyCredentialRequestOptions} returns this
 */
proto.webauthn.PublicKeyCredentialRequestOptions.prototype.clearTimeout = function() {
  return this.setTimeout(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.webauthn.PublicKeyCredentialRequestOptions.prototype.hasTimeout = function() {
  return jspb.Message.getField(this, 3) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.webauthn.AuthenticatorSelectionCriteria.prototype.toObject = function(opt_includeInstance) {
  return proto.webauthn.AuthenticatorSelectionCriteria.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.webauthn.AuthenticatorSelectionCriteria} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.webauthn.AuthenticatorSelectionCriteria.toObject = function(includeInstance, msg) {
  var f, obj = {
    authenticatorAttachment: jspb.Message.getFieldWithDefault(msg, 1, 0),
    requireResidentKey: jspb.Message.getBooleanFieldWithDefault(msg, 2, false),
    userVerification: jspb.Message.getFieldWithDefault(msg, 3, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.webauthn.AuthenticatorSelectionCriteria}
 */
proto.webauthn.AuthenticatorSelectionCriteria.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.webauthn.AuthenticatorSelectionCriteria;
  return proto.webauthn.AuthenticatorSelectionCriteria.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.webauthn.AuthenticatorSelectionCriteria} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.webauthn.AuthenticatorSelectionCriteria}
 */
proto.webauthn.AuthenticatorSelectionCriteria.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.webauthn.AuthenticatorSelectionCriteria.AuthenticatorAttachment} */ (reader.readEnum());
      msg.setAuthenticatorAttachment(value);
      break;
    case 2:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setRequireResidentKey(value);
      break;
    case 3:
      var value = /** @type {!proto.webauthn.AuthenticatorSelectionCriteria.UserVerificationRequirement} */ (reader.readEnum());
      msg.setUserVerification(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.webauthn.AuthenticatorSelectionCriteria.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.webauthn.AuthenticatorSelectionCriteria.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.webauthn.AuthenticatorSelectionCriteria} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.webauthn.AuthenticatorSelectionCriteria.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAuthenticatorAttachment();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getRequireResidentKey();
  if (f) {
    writer.writeBool(
      2,
      f
    );
  }
  f = message.getUserVerification();
  if (f !== 0.0) {
    writer.writeEnum(
      3,
      f
    );
  }
};


/**
 * @enum {number}
 */
proto.webauthn.AuthenticatorSelectionCriteria.AuthenticatorAttachment = {
  MISSING_AUTHENTICATOR_ATTACHMENT: 0,
  CROSS_PLATFORM: 1,
  PLATFORM: 2
};

/**
 * @enum {number}
 */
proto.webauthn.AuthenticatorSelectionCriteria.UserVerificationRequirement = {
  MISSING_USER_VERIFICATION_REQUIREMENT: 0,
  DISCOURAGED: 1,
  PREFERRED: 2,
  REQUIRED: 3
};

/**
 * optional AuthenticatorAttachment authenticator_attachment = 1;
 * @return {!proto.webauthn.AuthenticatorSelectionCriteria.AuthenticatorAttachment}
 */
proto.webauthn.AuthenticatorSelectionCriteria.prototype.getAuthenticatorAttachment = function() {
  return /** @type {!proto.webauthn.AuthenticatorSelectionCriteria.AuthenticatorAttachment} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {!proto.webauthn.AuthenticatorSelectionCriteria.AuthenticatorAttachment} value
 * @return {!proto.webauthn.AuthenticatorSelectionCriteria} returns this
 */
proto.webauthn.AuthenticatorSelectionCriteria.prototype.setAuthenticatorAttachment = function(value) {
  return jspb.Message.setProto3EnumField(this, 1, value);
};


/**
 * optional bool require_resident_key = 2;
 * @return {boolean}
 */
proto.webauthn.AuthenticatorSelectionCriteria.prototype.getRequireResidentKey = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 2, false));
};


/**
 * @param {boolean} value
 * @return {!proto.webauthn.AuthenticatorSelectionCriteria} returns this
 */
proto.webauthn.AuthenticatorSelectionCriteria.prototype.setRequireResidentKey = function(value) {
  return jspb.Message.setProto3BooleanField(this, 2, value);
};


/**
 * optional UserVerificationRequirement user_verification = 3;
 * @return {!proto.webauthn.AuthenticatorSelectionCriteria.UserVerificationRequirement}
 */
proto.webauthn.AuthenticatorSelectionCriteria.prototype.getUserVerification = function() {
  return /** @type {!proto.webauthn.AuthenticatorSelectionCriteria.UserVerificationRequirement} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {!proto.webauthn.AuthenticatorSelectionCriteria.UserVerificationRequirement} value
 * @return {!proto.webauthn.AuthenticatorSelectionCriteria} returns this
 */
proto.webauthn.AuthenticatorSelectionCriteria.prototype.setUserVerification = function(value) {
  return jspb.Message.setProto3EnumField(this, 3, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.webauthn.PublicKeyCredentialDescriptor.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.webauthn.PublicKeyCredentialDescriptor.prototype.toObject = function(opt_includeInstance) {
  return proto.webauthn.PublicKeyCredentialDescriptor.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.webauthn.PublicKeyCredentialDescriptor} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.webauthn.PublicKeyCredentialDescriptor.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: msg.getId_asB64(),
    transportsList: (f = jspb.Message.getRepeatedField(msg, 2)) == null ? undefined : f,
    type: jspb.Message.getFieldWithDefault(msg, 3, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.webauthn.PublicKeyCredentialDescriptor}
 */
proto.webauthn.PublicKeyCredentialDescriptor.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.webauthn.PublicKeyCredentialDescriptor;
  return proto.webauthn.PublicKeyCredentialDescriptor.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.webauthn.PublicKeyCredentialDescriptor} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.webauthn.PublicKeyCredentialDescriptor}
 */
proto.webauthn.PublicKeyCredentialDescriptor.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {!Array<!proto.webauthn.PublicKeyCredentialDescriptor.AuthenticatorTransport>} */ (reader.readPackedEnum());
      msg.setTransportsList(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setType(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.webauthn.PublicKeyCredentialDescriptor.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.webauthn.PublicKeyCredentialDescriptor.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.webauthn.PublicKeyCredentialDescriptor} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.webauthn.PublicKeyCredentialDescriptor.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
  f = message.getTransportsList();
  if (f.length > 0) {
    writer.writePackedEnum(
      2,
      f
    );
  }
  f = message.getType();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
};


/**
 * @enum {number}
 */
proto.webauthn.PublicKeyCredentialDescriptor.AuthenticatorTransport = {
  MISSING_AUTHENTICATOR_TRANSPORT: 0,
  BLE: 1,
  INTERNAL: 2,
  NFC: 3,
  USB: 4
};

/**
 * optional bytes id = 1;
 * @return {string}
 */
proto.webauthn.PublicKeyCredentialDescriptor.prototype.getId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes id = 1;
 * This is a type-conversion wrapper around `getId()`
 * @return {string}
 */
proto.webauthn.PublicKeyCredentialDescriptor.prototype.getId_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getId()));
};


/**
 * optional bytes id = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getId()`
 * @return {!Uint8Array}
 */
proto.webauthn.PublicKeyCredentialDescriptor.prototype.getId_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getId()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.webauthn.PublicKeyCredentialDescriptor} returns this
 */
proto.webauthn.PublicKeyCredentialDescriptor.prototype.setId = function(value) {
  return jspb.Message.setProto3BytesField(this, 1, value);
};


/**
 * repeated AuthenticatorTransport transports = 2;
 * @return {!Array<!proto.webauthn.PublicKeyCredentialDescriptor.AuthenticatorTransport>}
 */
proto.webauthn.PublicKeyCredentialDescriptor.prototype.getTransportsList = function() {
  return /** @type {!Array<!proto.webauthn.PublicKeyCredentialDescriptor.AuthenticatorTransport>} */ (jspb.Message.getRepeatedField(this, 2));
};


/**
 * @param {!Array<!proto.webauthn.PublicKeyCredentialDescriptor.AuthenticatorTransport>} value
 * @return {!proto.webauthn.PublicKeyCredentialDescriptor} returns this
 */
proto.webauthn.PublicKeyCredentialDescriptor.prototype.setTransportsList = function(value) {
  return jspb.Message.setField(this, 2, value || []);
};


/**
 * @param {!proto.webauthn.PublicKeyCredentialDescriptor.AuthenticatorTransport} value
 * @param {number=} opt_index
 * @return {!proto.webauthn.PublicKeyCredentialDescriptor} returns this
 */
proto.webauthn.PublicKeyCredentialDescriptor.prototype.addTransports = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 2, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.webauthn.PublicKeyCredentialDescriptor} returns this
 */
proto.webauthn.PublicKeyCredentialDescriptor.prototype.clearTransportsList = function() {
  return this.setTransportsList([]);
};


/**
 * optional string type = 3;
 * @return {string}
 */
proto.webauthn.PublicKeyCredentialDescriptor.prototype.getType = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.webauthn.PublicKeyCredentialDescriptor} returns this
 */
proto.webauthn.PublicKeyCredentialDescriptor.prototype.setType = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.webauthn.PublicKeyCredentialParameters.prototype.toObject = function(opt_includeInstance) {
  return proto.webauthn.PublicKeyCredentialParameters.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.webauthn.PublicKeyCredentialParameters} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.webauthn.PublicKeyCredentialParameters.toObject = function(includeInstance, msg) {
  var f, obj = {
    alg: jspb.Message.getFieldWithDefault(msg, 1, 0),
    type: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.webauthn.PublicKeyCredentialParameters}
 */
proto.webauthn.PublicKeyCredentialParameters.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.webauthn.PublicKeyCredentialParameters;
  return proto.webauthn.PublicKeyCredentialParameters.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.webauthn.PublicKeyCredentialParameters} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.webauthn.PublicKeyCredentialParameters}
 */
proto.webauthn.PublicKeyCredentialParameters.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setAlg(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setType(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.webauthn.PublicKeyCredentialParameters.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.webauthn.PublicKeyCredentialParameters.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.webauthn.PublicKeyCredentialParameters} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.webauthn.PublicKeyCredentialParameters.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAlg();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getType();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional int32 alg = 1;
 * @return {number}
 */
proto.webauthn.PublicKeyCredentialParameters.prototype.getAlg = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.webauthn.PublicKeyCredentialParameters} returns this
 */
proto.webauthn.PublicKeyCredentialParameters.prototype.setAlg = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional string type = 2;
 * @return {string}
 */
proto.webauthn.PublicKeyCredentialParameters.prototype.getType = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.webauthn.PublicKeyCredentialParameters} returns this
 */
proto.webauthn.PublicKeyCredentialParameters.prototype.setType = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.webauthn.PublicKeyCredentialRpEntity.prototype.toObject = function(opt_includeInstance) {
  return proto.webauthn.PublicKeyCredentialRpEntity.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.webauthn.PublicKeyCredentialRpEntity} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.webauthn.PublicKeyCredentialRpEntity.toObject = function(includeInstance, msg) {
  var f, obj = {
    name: jspb.Message.getFieldWithDefault(msg, 1, ""),
    icon: jspb.Message.getFieldWithDefault(msg, 2, ""),
    id: jspb.Message.getFieldWithDefault(msg, 3, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.webauthn.PublicKeyCredentialRpEntity}
 */
proto.webauthn.PublicKeyCredentialRpEntity.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.webauthn.PublicKeyCredentialRpEntity;
  return proto.webauthn.PublicKeyCredentialRpEntity.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.webauthn.PublicKeyCredentialRpEntity} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.webauthn.PublicKeyCredentialRpEntity}
 */
proto.webauthn.PublicKeyCredentialRpEntity.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setIcon(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.webauthn.PublicKeyCredentialRpEntity.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.webauthn.PublicKeyCredentialRpEntity.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.webauthn.PublicKeyCredentialRpEntity} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.webauthn.PublicKeyCredentialRpEntity.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getIcon();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getId();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
};


/**
 * optional string name = 1;
 * @return {string}
 */
proto.webauthn.PublicKeyCredentialRpEntity.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.webauthn.PublicKeyCredentialRpEntity} returns this
 */
proto.webauthn.PublicKeyCredentialRpEntity.prototype.setName = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string icon = 2;
 * @return {string}
 */
proto.webauthn.PublicKeyCredentialRpEntity.prototype.getIcon = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.webauthn.PublicKeyCredentialRpEntity} returns this
 */
proto.webauthn.PublicKeyCredentialRpEntity.prototype.setIcon = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string id = 3;
 * @return {string}
 */
proto.webauthn.PublicKeyCredentialRpEntity.prototype.getId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.webauthn.PublicKeyCredentialRpEntity} returns this
 */
proto.webauthn.PublicKeyCredentialRpEntity.prototype.setId = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.webauthn.PublicKeyCredentialUserEntity.prototype.toObject = function(opt_includeInstance) {
  return proto.webauthn.PublicKeyCredentialUserEntity.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.webauthn.PublicKeyCredentialUserEntity} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.webauthn.PublicKeyCredentialUserEntity.toObject = function(includeInstance, msg) {
  var f, obj = {
    name: jspb.Message.getFieldWithDefault(msg, 1, ""),
    icon: jspb.Message.getFieldWithDefault(msg, 2, ""),
    displayName: jspb.Message.getFieldWithDefault(msg, 3, ""),
    id: msg.getId_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.webauthn.PublicKeyCredentialUserEntity}
 */
proto.webauthn.PublicKeyCredentialUserEntity.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.webauthn.PublicKeyCredentialUserEntity;
  return proto.webauthn.PublicKeyCredentialUserEntity.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.webauthn.PublicKeyCredentialUserEntity} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.webauthn.PublicKeyCredentialUserEntity}
 */
proto.webauthn.PublicKeyCredentialUserEntity.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setIcon(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setDisplayName(value);
      break;
    case 4:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.webauthn.PublicKeyCredentialUserEntity.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.webauthn.PublicKeyCredentialUserEntity.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.webauthn.PublicKeyCredentialUserEntity} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.webauthn.PublicKeyCredentialUserEntity.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getIcon();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getDisplayName();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getId_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      4,
      f
    );
  }
};


/**
 * optional string name = 1;
 * @return {string}
 */
proto.webauthn.PublicKeyCredentialUserEntity.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.webauthn.PublicKeyCredentialUserEntity} returns this
 */
proto.webauthn.PublicKeyCredentialUserEntity.prototype.setName = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string icon = 2;
 * @return {string}
 */
proto.webauthn.PublicKeyCredentialUserEntity.prototype.getIcon = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.webauthn.PublicKeyCredentialUserEntity} returns this
 */
proto.webauthn.PublicKeyCredentialUserEntity.prototype.setIcon = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string display_name = 3;
 * @return {string}
 */
proto.webauthn.PublicKeyCredentialUserEntity.prototype.getDisplayName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.webauthn.PublicKeyCredentialUserEntity} returns this
 */
proto.webauthn.PublicKeyCredentialUserEntity.prototype.setDisplayName = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional bytes id = 4;
 * @return {string}
 */
proto.webauthn.PublicKeyCredentialUserEntity.prototype.getId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * optional bytes id = 4;
 * This is a type-conversion wrapper around `getId()`
 * @return {string}
 */
proto.webauthn.PublicKeyCredentialUserEntity.prototype.getId_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getId()));
};


/**
 * optional bytes id = 4;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getId()`
 * @return {!Uint8Array}
 */
proto.webauthn.PublicKeyCredentialUserEntity.prototype.getId_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getId()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.webauthn.PublicKeyCredentialUserEntity} returns this
 */
proto.webauthn.PublicKeyCredentialUserEntity.prototype.setId = function(value) {
  return jspb.Message.setProto3BytesField(this, 4, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.webauthn.PublicKeyCredential.prototype.toObject = function(opt_includeInstance) {
  return proto.webauthn.PublicKeyCredential.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.webauthn.PublicKeyCredential} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.webauthn.PublicKeyCredential.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, ""),
    type: jspb.Message.getFieldWithDefault(msg, 2, ""),
    response: (f = msg.getResponse()) && proto.webauthn.AuthenticatorResponse.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.webauthn.PublicKeyCredential}
 */
proto.webauthn.PublicKeyCredential.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.webauthn.PublicKeyCredential;
  return proto.webauthn.PublicKeyCredential.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.webauthn.PublicKeyCredential} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.webauthn.PublicKeyCredential}
 */
proto.webauthn.PublicKeyCredential.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setType(value);
      break;
    case 3:
      var value = new proto.webauthn.AuthenticatorResponse;
      reader.readMessage(value,proto.webauthn.AuthenticatorResponse.deserializeBinaryFromReader);
      msg.setResponse(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.webauthn.PublicKeyCredential.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.webauthn.PublicKeyCredential.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.webauthn.PublicKeyCredential} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.webauthn.PublicKeyCredential.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getType();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getResponse();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.webauthn.AuthenticatorResponse.serializeBinaryToWriter
    );
  }
};


/**
 * optional string id = 1;
 * @return {string}
 */
proto.webauthn.PublicKeyCredential.prototype.getId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.webauthn.PublicKeyCredential} returns this
 */
proto.webauthn.PublicKeyCredential.prototype.setId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string type = 2;
 * @return {string}
 */
proto.webauthn.PublicKeyCredential.prototype.getType = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.webauthn.PublicKeyCredential} returns this
 */
proto.webauthn.PublicKeyCredential.prototype.setType = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional AuthenticatorResponse response = 3;
 * @return {?proto.webauthn.AuthenticatorResponse}
 */
proto.webauthn.PublicKeyCredential.prototype.getResponse = function() {
  return /** @type{?proto.webauthn.AuthenticatorResponse} */ (
    jspb.Message.getWrapperField(this, proto.webauthn.AuthenticatorResponse, 3));
};


/**
 * @param {?proto.webauthn.AuthenticatorResponse|undefined} value
 * @return {!proto.webauthn.PublicKeyCredential} returns this
*/
proto.webauthn.PublicKeyCredential.prototype.setResponse = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.webauthn.PublicKeyCredential} returns this
 */
proto.webauthn.PublicKeyCredential.prototype.clearResponse = function() {
  return this.setResponse(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.webauthn.PublicKeyCredential.prototype.hasResponse = function() {
  return jspb.Message.getField(this, 3) != null;
};



/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.webauthn.AuthenticatorResponse.oneofGroups_ = [[2,3]];

/**
 * @enum {number}
 */
proto.webauthn.AuthenticatorResponse.ResponseCase = {
  RESPONSE_NOT_SET: 0,
  ATTESTATION_RESPONSE: 2,
  ASSERTION_RESPONSE: 3
};

/**
 * @return {proto.webauthn.AuthenticatorResponse.ResponseCase}
 */
proto.webauthn.AuthenticatorResponse.prototype.getResponseCase = function() {
  return /** @type {proto.webauthn.AuthenticatorResponse.ResponseCase} */(jspb.Message.computeOneofCase(this, proto.webauthn.AuthenticatorResponse.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.webauthn.AuthenticatorResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.webauthn.AuthenticatorResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.webauthn.AuthenticatorResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.webauthn.AuthenticatorResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    clientDataJson: msg.getClientDataJson_asB64(),
    attestationResponse: (f = msg.getAttestationResponse()) && proto.webauthn.AuthenticatorAttestationResponse.toObject(includeInstance, f),
    assertionResponse: (f = msg.getAssertionResponse()) && proto.webauthn.AuthenticatorAssertionResponse.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.webauthn.AuthenticatorResponse}
 */
proto.webauthn.AuthenticatorResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.webauthn.AuthenticatorResponse;
  return proto.webauthn.AuthenticatorResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.webauthn.AuthenticatorResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.webauthn.AuthenticatorResponse}
 */
proto.webauthn.AuthenticatorResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setClientDataJson(value);
      break;
    case 2:
      var value = new proto.webauthn.AuthenticatorAttestationResponse;
      reader.readMessage(value,proto.webauthn.AuthenticatorAttestationResponse.deserializeBinaryFromReader);
      msg.setAttestationResponse(value);
      break;
    case 3:
      var value = new proto.webauthn.AuthenticatorAssertionResponse;
      reader.readMessage(value,proto.webauthn.AuthenticatorAssertionResponse.deserializeBinaryFromReader);
      msg.setAssertionResponse(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.webauthn.AuthenticatorResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.webauthn.AuthenticatorResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.webauthn.AuthenticatorResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.webauthn.AuthenticatorResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getClientDataJson_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
  f = message.getAttestationResponse();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.webauthn.AuthenticatorAttestationResponse.serializeBinaryToWriter
    );
  }
  f = message.getAssertionResponse();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.webauthn.AuthenticatorAssertionResponse.serializeBinaryToWriter
    );
  }
};


/**
 * optional bytes client_data_json = 1;
 * @return {string}
 */
proto.webauthn.AuthenticatorResponse.prototype.getClientDataJson = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes client_data_json = 1;
 * This is a type-conversion wrapper around `getClientDataJson()`
 * @return {string}
 */
proto.webauthn.AuthenticatorResponse.prototype.getClientDataJson_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getClientDataJson()));
};


/**
 * optional bytes client_data_json = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getClientDataJson()`
 * @return {!Uint8Array}
 */
proto.webauthn.AuthenticatorResponse.prototype.getClientDataJson_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getClientDataJson()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.webauthn.AuthenticatorResponse} returns this
 */
proto.webauthn.AuthenticatorResponse.prototype.setClientDataJson = function(value) {
  return jspb.Message.setProto3BytesField(this, 1, value);
};


/**
 * optional AuthenticatorAttestationResponse attestation_response = 2;
 * @return {?proto.webauthn.AuthenticatorAttestationResponse}
 */
proto.webauthn.AuthenticatorResponse.prototype.getAttestationResponse = function() {
  return /** @type{?proto.webauthn.AuthenticatorAttestationResponse} */ (
    jspb.Message.getWrapperField(this, proto.webauthn.AuthenticatorAttestationResponse, 2));
};


/**
 * @param {?proto.webauthn.AuthenticatorAttestationResponse|undefined} value
 * @return {!proto.webauthn.AuthenticatorResponse} returns this
*/
proto.webauthn.AuthenticatorResponse.prototype.setAttestationResponse = function(value) {
  return jspb.Message.setOneofWrapperField(this, 2, proto.webauthn.AuthenticatorResponse.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.webauthn.AuthenticatorResponse} returns this
 */
proto.webauthn.AuthenticatorResponse.prototype.clearAttestationResponse = function() {
  return this.setAttestationResponse(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.webauthn.AuthenticatorResponse.prototype.hasAttestationResponse = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional AuthenticatorAssertionResponse assertion_response = 3;
 * @return {?proto.webauthn.AuthenticatorAssertionResponse}
 */
proto.webauthn.AuthenticatorResponse.prototype.getAssertionResponse = function() {
  return /** @type{?proto.webauthn.AuthenticatorAssertionResponse} */ (
    jspb.Message.getWrapperField(this, proto.webauthn.AuthenticatorAssertionResponse, 3));
};


/**
 * @param {?proto.webauthn.AuthenticatorAssertionResponse|undefined} value
 * @return {!proto.webauthn.AuthenticatorResponse} returns this
*/
proto.webauthn.AuthenticatorResponse.prototype.setAssertionResponse = function(value) {
  return jspb.Message.setOneofWrapperField(this, 3, proto.webauthn.AuthenticatorResponse.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.webauthn.AuthenticatorResponse} returns this
 */
proto.webauthn.AuthenticatorResponse.prototype.clearAssertionResponse = function() {
  return this.setAssertionResponse(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.webauthn.AuthenticatorResponse.prototype.hasAssertionResponse = function() {
  return jspb.Message.getField(this, 3) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.webauthn.AuthenticatorAttestationResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.webauthn.AuthenticatorAttestationResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.webauthn.AuthenticatorAttestationResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.webauthn.AuthenticatorAttestationResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    attestationObject: msg.getAttestationObject_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.webauthn.AuthenticatorAttestationResponse}
 */
proto.webauthn.AuthenticatorAttestationResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.webauthn.AuthenticatorAttestationResponse;
  return proto.webauthn.AuthenticatorAttestationResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.webauthn.AuthenticatorAttestationResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.webauthn.AuthenticatorAttestationResponse}
 */
proto.webauthn.AuthenticatorAttestationResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setAttestationObject(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.webauthn.AuthenticatorAttestationResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.webauthn.AuthenticatorAttestationResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.webauthn.AuthenticatorAttestationResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.webauthn.AuthenticatorAttestationResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAttestationObject_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
};


/**
 * optional bytes attestation_object = 1;
 * @return {string}
 */
proto.webauthn.AuthenticatorAttestationResponse.prototype.getAttestationObject = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes attestation_object = 1;
 * This is a type-conversion wrapper around `getAttestationObject()`
 * @return {string}
 */
proto.webauthn.AuthenticatorAttestationResponse.prototype.getAttestationObject_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getAttestationObject()));
};


/**
 * optional bytes attestation_object = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getAttestationObject()`
 * @return {!Uint8Array}
 */
proto.webauthn.AuthenticatorAttestationResponse.prototype.getAttestationObject_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getAttestationObject()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.webauthn.AuthenticatorAttestationResponse} returns this
 */
proto.webauthn.AuthenticatorAttestationResponse.prototype.setAttestationObject = function(value) {
  return jspb.Message.setProto3BytesField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.webauthn.AuthenticatorAssertionResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.webauthn.AuthenticatorAssertionResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.webauthn.AuthenticatorAssertionResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.webauthn.AuthenticatorAssertionResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    authenticatorData: msg.getAuthenticatorData_asB64(),
    signature: msg.getSignature_asB64(),
    userHandle: msg.getUserHandle_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.webauthn.AuthenticatorAssertionResponse}
 */
proto.webauthn.AuthenticatorAssertionResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.webauthn.AuthenticatorAssertionResponse;
  return proto.webauthn.AuthenticatorAssertionResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.webauthn.AuthenticatorAssertionResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.webauthn.AuthenticatorAssertionResponse}
 */
proto.webauthn.AuthenticatorAssertionResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setAuthenticatorData(value);
      break;
    case 2:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setSignature(value);
      break;
    case 3:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setUserHandle(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.webauthn.AuthenticatorAssertionResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.webauthn.AuthenticatorAssertionResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.webauthn.AuthenticatorAssertionResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.webauthn.AuthenticatorAssertionResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAuthenticatorData_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
  f = message.getSignature_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      2,
      f
    );
  }
  f = message.getUserHandle_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      3,
      f
    );
  }
};


/**
 * optional bytes authenticator_data = 1;
 * @return {string}
 */
proto.webauthn.AuthenticatorAssertionResponse.prototype.getAuthenticatorData = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes authenticator_data = 1;
 * This is a type-conversion wrapper around `getAuthenticatorData()`
 * @return {string}
 */
proto.webauthn.AuthenticatorAssertionResponse.prototype.getAuthenticatorData_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getAuthenticatorData()));
};


/**
 * optional bytes authenticator_data = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getAuthenticatorData()`
 * @return {!Uint8Array}
 */
proto.webauthn.AuthenticatorAssertionResponse.prototype.getAuthenticatorData_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getAuthenticatorData()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.webauthn.AuthenticatorAssertionResponse} returns this
 */
proto.webauthn.AuthenticatorAssertionResponse.prototype.setAuthenticatorData = function(value) {
  return jspb.Message.setProto3BytesField(this, 1, value);
};


/**
 * optional bytes signature = 2;
 * @return {string}
 */
proto.webauthn.AuthenticatorAssertionResponse.prototype.getSignature = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * optional bytes signature = 2;
 * This is a type-conversion wrapper around `getSignature()`
 * @return {string}
 */
proto.webauthn.AuthenticatorAssertionResponse.prototype.getSignature_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getSignature()));
};


/**
 * optional bytes signature = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getSignature()`
 * @return {!Uint8Array}
 */
proto.webauthn.AuthenticatorAssertionResponse.prototype.getSignature_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getSignature()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.webauthn.AuthenticatorAssertionResponse} returns this
 */
proto.webauthn.AuthenticatorAssertionResponse.prototype.setSignature = function(value) {
  return jspb.Message.setProto3BytesField(this, 2, value);
};


/**
 * optional bytes user_handle = 3;
 * @return {string}
 */
proto.webauthn.AuthenticatorAssertionResponse.prototype.getUserHandle = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * optional bytes user_handle = 3;
 * This is a type-conversion wrapper around `getUserHandle()`
 * @return {string}
 */
proto.webauthn.AuthenticatorAssertionResponse.prototype.getUserHandle_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getUserHandle()));
};


/**
 * optional bytes user_handle = 3;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getUserHandle()`
 * @return {!Uint8Array}
 */
proto.webauthn.AuthenticatorAssertionResponse.prototype.getUserHandle_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getUserHandle()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.webauthn.AuthenticatorAssertionResponse} returns this
 */
proto.webauthn.AuthenticatorAssertionResponse.prototype.setUserHandle = function(value) {
  return jspb.Message.setProto3BytesField(this, 3, value);
};


goog.object.extend(exports, proto.webauthn);
