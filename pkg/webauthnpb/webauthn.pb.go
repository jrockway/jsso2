// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0
// 	protoc        v3.13.0
// source: webauthn.proto

package webauthnpb

import (
	proto "github.com/golang/protobuf/proto"
	duration "github.com/golang/protobuf/ptypes/duration"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type PublicKeyCredentialCreationOptions_AttestationConveyancePreference int32

const (
	PublicKeyCredentialCreationOptions_NONE     PublicKeyCredentialCreationOptions_AttestationConveyancePreference = 0
	PublicKeyCredentialCreationOptions_DIRECT   PublicKeyCredentialCreationOptions_AttestationConveyancePreference = 1
	PublicKeyCredentialCreationOptions_INDIRECT PublicKeyCredentialCreationOptions_AttestationConveyancePreference = 2
)

// Enum value maps for PublicKeyCredentialCreationOptions_AttestationConveyancePreference.
var (
	PublicKeyCredentialCreationOptions_AttestationConveyancePreference_name = map[int32]string{
		0: "NONE",
		1: "DIRECT",
		2: "INDIRECT",
	}
	PublicKeyCredentialCreationOptions_AttestationConveyancePreference_value = map[string]int32{
		"NONE":     0,
		"DIRECT":   1,
		"INDIRECT": 2,
	}
)

func (x PublicKeyCredentialCreationOptions_AttestationConveyancePreference) Enum() *PublicKeyCredentialCreationOptions_AttestationConveyancePreference {
	p := new(PublicKeyCredentialCreationOptions_AttestationConveyancePreference)
	*p = x
	return p
}

func (x PublicKeyCredentialCreationOptions_AttestationConveyancePreference) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PublicKeyCredentialCreationOptions_AttestationConveyancePreference) Descriptor() protoreflect.EnumDescriptor {
	return file_webauthn_proto_enumTypes[0].Descriptor()
}

func (PublicKeyCredentialCreationOptions_AttestationConveyancePreference) Type() protoreflect.EnumType {
	return &file_webauthn_proto_enumTypes[0]
}

func (x PublicKeyCredentialCreationOptions_AttestationConveyancePreference) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PublicKeyCredentialCreationOptions_AttestationConveyancePreference.Descriptor instead.
func (PublicKeyCredentialCreationOptions_AttestationConveyancePreference) EnumDescriptor() ([]byte, []int) {
	return file_webauthn_proto_rawDescGZIP(), []int{0, 0}
}

type AuthenticatorSelectionCriteria_AuthenticatorAttachment int32

const (
	AuthenticatorSelectionCriteria_MISSING_AUTHENTICATOR_ATTACHMENT AuthenticatorSelectionCriteria_AuthenticatorAttachment = 0
	AuthenticatorSelectionCriteria_CROSS_PLATFORM                   AuthenticatorSelectionCriteria_AuthenticatorAttachment = 1
	AuthenticatorSelectionCriteria_PLATFORM                         AuthenticatorSelectionCriteria_AuthenticatorAttachment = 2
)

// Enum value maps for AuthenticatorSelectionCriteria_AuthenticatorAttachment.
var (
	AuthenticatorSelectionCriteria_AuthenticatorAttachment_name = map[int32]string{
		0: "MISSING_AUTHENTICATOR_ATTACHMENT",
		1: "CROSS_PLATFORM",
		2: "PLATFORM",
	}
	AuthenticatorSelectionCriteria_AuthenticatorAttachment_value = map[string]int32{
		"MISSING_AUTHENTICATOR_ATTACHMENT": 0,
		"CROSS_PLATFORM":                   1,
		"PLATFORM":                         2,
	}
)

func (x AuthenticatorSelectionCriteria_AuthenticatorAttachment) Enum() *AuthenticatorSelectionCriteria_AuthenticatorAttachment {
	p := new(AuthenticatorSelectionCriteria_AuthenticatorAttachment)
	*p = x
	return p
}

func (x AuthenticatorSelectionCriteria_AuthenticatorAttachment) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (AuthenticatorSelectionCriteria_AuthenticatorAttachment) Descriptor() protoreflect.EnumDescriptor {
	return file_webauthn_proto_enumTypes[1].Descriptor()
}

func (AuthenticatorSelectionCriteria_AuthenticatorAttachment) Type() protoreflect.EnumType {
	return &file_webauthn_proto_enumTypes[1]
}

func (x AuthenticatorSelectionCriteria_AuthenticatorAttachment) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use AuthenticatorSelectionCriteria_AuthenticatorAttachment.Descriptor instead.
func (AuthenticatorSelectionCriteria_AuthenticatorAttachment) EnumDescriptor() ([]byte, []int) {
	return file_webauthn_proto_rawDescGZIP(), []int{2, 0}
}

type AuthenticatorSelectionCriteria_UserVerificationRequirement int32

const (
	AuthenticatorSelectionCriteria_MISSING_USER_VERIFICATION_REQUIREMENT AuthenticatorSelectionCriteria_UserVerificationRequirement = 0
	AuthenticatorSelectionCriteria_DISCOURAGED                           AuthenticatorSelectionCriteria_UserVerificationRequirement = 1
	AuthenticatorSelectionCriteria_PREFERRED                             AuthenticatorSelectionCriteria_UserVerificationRequirement = 2
	AuthenticatorSelectionCriteria_REQUIRED                              AuthenticatorSelectionCriteria_UserVerificationRequirement = 3
)

// Enum value maps for AuthenticatorSelectionCriteria_UserVerificationRequirement.
var (
	AuthenticatorSelectionCriteria_UserVerificationRequirement_name = map[int32]string{
		0: "MISSING_USER_VERIFICATION_REQUIREMENT",
		1: "DISCOURAGED",
		2: "PREFERRED",
		3: "REQUIRED",
	}
	AuthenticatorSelectionCriteria_UserVerificationRequirement_value = map[string]int32{
		"MISSING_USER_VERIFICATION_REQUIREMENT": 0,
		"DISCOURAGED":                           1,
		"PREFERRED":                             2,
		"REQUIRED":                              3,
	}
)

func (x AuthenticatorSelectionCriteria_UserVerificationRequirement) Enum() *AuthenticatorSelectionCriteria_UserVerificationRequirement {
	p := new(AuthenticatorSelectionCriteria_UserVerificationRequirement)
	*p = x
	return p
}

func (x AuthenticatorSelectionCriteria_UserVerificationRequirement) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (AuthenticatorSelectionCriteria_UserVerificationRequirement) Descriptor() protoreflect.EnumDescriptor {
	return file_webauthn_proto_enumTypes[2].Descriptor()
}

func (AuthenticatorSelectionCriteria_UserVerificationRequirement) Type() protoreflect.EnumType {
	return &file_webauthn_proto_enumTypes[2]
}

func (x AuthenticatorSelectionCriteria_UserVerificationRequirement) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use AuthenticatorSelectionCriteria_UserVerificationRequirement.Descriptor instead.
func (AuthenticatorSelectionCriteria_UserVerificationRequirement) EnumDescriptor() ([]byte, []int) {
	return file_webauthn_proto_rawDescGZIP(), []int{2, 1}
}

type PublicKeyCredentialDescriptor_AuthenticatorTransport int32

const (
	PublicKeyCredentialDescriptor_MISSING_AUTHENTICATOR_TRANSPORT PublicKeyCredentialDescriptor_AuthenticatorTransport = 0
	PublicKeyCredentialDescriptor_BLE                             PublicKeyCredentialDescriptor_AuthenticatorTransport = 1
	PublicKeyCredentialDescriptor_INTERNAL                        PublicKeyCredentialDescriptor_AuthenticatorTransport = 2
	PublicKeyCredentialDescriptor_NFC                             PublicKeyCredentialDescriptor_AuthenticatorTransport = 3
	PublicKeyCredentialDescriptor_USB                             PublicKeyCredentialDescriptor_AuthenticatorTransport = 4
)

// Enum value maps for PublicKeyCredentialDescriptor_AuthenticatorTransport.
var (
	PublicKeyCredentialDescriptor_AuthenticatorTransport_name = map[int32]string{
		0: "MISSING_AUTHENTICATOR_TRANSPORT",
		1: "BLE",
		2: "INTERNAL",
		3: "NFC",
		4: "USB",
	}
	PublicKeyCredentialDescriptor_AuthenticatorTransport_value = map[string]int32{
		"MISSING_AUTHENTICATOR_TRANSPORT": 0,
		"BLE":                             1,
		"INTERNAL":                        2,
		"NFC":                             3,
		"USB":                             4,
	}
)

func (x PublicKeyCredentialDescriptor_AuthenticatorTransport) Enum() *PublicKeyCredentialDescriptor_AuthenticatorTransport {
	p := new(PublicKeyCredentialDescriptor_AuthenticatorTransport)
	*p = x
	return p
}

func (x PublicKeyCredentialDescriptor_AuthenticatorTransport) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PublicKeyCredentialDescriptor_AuthenticatorTransport) Descriptor() protoreflect.EnumDescriptor {
	return file_webauthn_proto_enumTypes[3].Descriptor()
}

func (PublicKeyCredentialDescriptor_AuthenticatorTransport) Type() protoreflect.EnumType {
	return &file_webauthn_proto_enumTypes[3]
}

func (x PublicKeyCredentialDescriptor_AuthenticatorTransport) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PublicKeyCredentialDescriptor_AuthenticatorTransport.Descriptor instead.
func (PublicKeyCredentialDescriptor_AuthenticatorTransport) EnumDescriptor() ([]byte, []int) {
	return file_webauthn_proto_rawDescGZIP(), []int{3, 0}
}

type PublicKeyCredentialCreationOptions struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Attestation            PublicKeyCredentialCreationOptions_AttestationConveyancePreference `protobuf:"varint,1,opt,name=attestation,proto3,enum=webauthn.PublicKeyCredentialCreationOptions_AttestationConveyancePreference" json:"attestation,omitempty"`
	AuthenticatorSelection *AuthenticatorSelectionCriteria                                    `protobuf:"bytes,2,opt,name=authenticator_selection,json=authenticatorSelection,proto3" json:"authenticator_selection,omitempty"`
	Challenge              []byte                                                             `protobuf:"bytes,3,opt,name=challenge,proto3" json:"challenge,omitempty"`
	ExcludeCredentials     []*PublicKeyCredentialDescriptor                                   `protobuf:"bytes,4,rep,name=exclude_credentials,json=excludeCredentials,proto3" json:"exclude_credentials,omitempty"`
	// This is commented out because we don't use it, and it avoids having to
	// define another nested hierarcy of types.
	// AuthenticationExtensionsClientInputs extensions = 5;
	PubKeyCredParams []*PublicKeyCredentialParameters `protobuf:"bytes,6,rep,name=pub_key_cred_params,json=pubKeyCredParams,proto3" json:"pub_key_cred_params,omitempty"`
	Rp               *PublicKeyCredentialRpEntity     `protobuf:"bytes,7,opt,name=rp,proto3" json:"rp,omitempty"`
	Timeout          *duration.Duration               `protobuf:"bytes,8,opt,name=timeout,proto3" json:"timeout,omitempty"`
	User             *PublicKeyCredentialUserEntity   `protobuf:"bytes,9,opt,name=user,proto3" json:"user,omitempty"`
}

func (x *PublicKeyCredentialCreationOptions) Reset() {
	*x = PublicKeyCredentialCreationOptions{}
	if protoimpl.UnsafeEnabled {
		mi := &file_webauthn_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PublicKeyCredentialCreationOptions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PublicKeyCredentialCreationOptions) ProtoMessage() {}

func (x *PublicKeyCredentialCreationOptions) ProtoReflect() protoreflect.Message {
	mi := &file_webauthn_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PublicKeyCredentialCreationOptions.ProtoReflect.Descriptor instead.
func (*PublicKeyCredentialCreationOptions) Descriptor() ([]byte, []int) {
	return file_webauthn_proto_rawDescGZIP(), []int{0}
}

func (x *PublicKeyCredentialCreationOptions) GetAttestation() PublicKeyCredentialCreationOptions_AttestationConveyancePreference {
	if x != nil {
		return x.Attestation
	}
	return PublicKeyCredentialCreationOptions_NONE
}

func (x *PublicKeyCredentialCreationOptions) GetAuthenticatorSelection() *AuthenticatorSelectionCriteria {
	if x != nil {
		return x.AuthenticatorSelection
	}
	return nil
}

func (x *PublicKeyCredentialCreationOptions) GetChallenge() []byte {
	if x != nil {
		return x.Challenge
	}
	return nil
}

func (x *PublicKeyCredentialCreationOptions) GetExcludeCredentials() []*PublicKeyCredentialDescriptor {
	if x != nil {
		return x.ExcludeCredentials
	}
	return nil
}

func (x *PublicKeyCredentialCreationOptions) GetPubKeyCredParams() []*PublicKeyCredentialParameters {
	if x != nil {
		return x.PubKeyCredParams
	}
	return nil
}

func (x *PublicKeyCredentialCreationOptions) GetRp() *PublicKeyCredentialRpEntity {
	if x != nil {
		return x.Rp
	}
	return nil
}

func (x *PublicKeyCredentialCreationOptions) GetTimeout() *duration.Duration {
	if x != nil {
		return x.Timeout
	}
	return nil
}

func (x *PublicKeyCredentialCreationOptions) GetUser() *PublicKeyCredentialUserEntity {
	if x != nil {
		return x.User
	}
	return nil
}

type PublicKeyCredentialRequestOptions struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Challenge          []byte                           `protobuf:"bytes,1,opt,name=challenge,proto3" json:"challenge,omitempty"`
	AllowedCredentials []*PublicKeyCredentialDescriptor `protobuf:"bytes,2,rep,name=allowed_credentials,json=allowedCredentials,proto3" json:"allowed_credentials,omitempty"`
	Timeout            *duration.Duration               `protobuf:"bytes,3,opt,name=timeout,proto3" json:"timeout,omitempty"` // ...
}

func (x *PublicKeyCredentialRequestOptions) Reset() {
	*x = PublicKeyCredentialRequestOptions{}
	if protoimpl.UnsafeEnabled {
		mi := &file_webauthn_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PublicKeyCredentialRequestOptions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PublicKeyCredentialRequestOptions) ProtoMessage() {}

func (x *PublicKeyCredentialRequestOptions) ProtoReflect() protoreflect.Message {
	mi := &file_webauthn_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PublicKeyCredentialRequestOptions.ProtoReflect.Descriptor instead.
func (*PublicKeyCredentialRequestOptions) Descriptor() ([]byte, []int) {
	return file_webauthn_proto_rawDescGZIP(), []int{1}
}

func (x *PublicKeyCredentialRequestOptions) GetChallenge() []byte {
	if x != nil {
		return x.Challenge
	}
	return nil
}

func (x *PublicKeyCredentialRequestOptions) GetAllowedCredentials() []*PublicKeyCredentialDescriptor {
	if x != nil {
		return x.AllowedCredentials
	}
	return nil
}

func (x *PublicKeyCredentialRequestOptions) GetTimeout() *duration.Duration {
	if x != nil {
		return x.Timeout
	}
	return nil
}

type AuthenticatorSelectionCriteria struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AuthenticatorAttachment AuthenticatorSelectionCriteria_AuthenticatorAttachment     `protobuf:"varint,1,opt,name=authenticator_attachment,json=authenticatorAttachment,proto3,enum=webauthn.AuthenticatorSelectionCriteria_AuthenticatorAttachment" json:"authenticator_attachment,omitempty"`
	RequireResidentKey      bool                                                       `protobuf:"varint,2,opt,name=require_resident_key,json=requireResidentKey,proto3" json:"require_resident_key,omitempty"`
	UserVerification        AuthenticatorSelectionCriteria_UserVerificationRequirement `protobuf:"varint,3,opt,name=user_verification,json=userVerification,proto3,enum=webauthn.AuthenticatorSelectionCriteria_UserVerificationRequirement" json:"user_verification,omitempty"`
}

func (x *AuthenticatorSelectionCriteria) Reset() {
	*x = AuthenticatorSelectionCriteria{}
	if protoimpl.UnsafeEnabled {
		mi := &file_webauthn_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AuthenticatorSelectionCriteria) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AuthenticatorSelectionCriteria) ProtoMessage() {}

func (x *AuthenticatorSelectionCriteria) ProtoReflect() protoreflect.Message {
	mi := &file_webauthn_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AuthenticatorSelectionCriteria.ProtoReflect.Descriptor instead.
func (*AuthenticatorSelectionCriteria) Descriptor() ([]byte, []int) {
	return file_webauthn_proto_rawDescGZIP(), []int{2}
}

func (x *AuthenticatorSelectionCriteria) GetAuthenticatorAttachment() AuthenticatorSelectionCriteria_AuthenticatorAttachment {
	if x != nil {
		return x.AuthenticatorAttachment
	}
	return AuthenticatorSelectionCriteria_MISSING_AUTHENTICATOR_ATTACHMENT
}

func (x *AuthenticatorSelectionCriteria) GetRequireResidentKey() bool {
	if x != nil {
		return x.RequireResidentKey
	}
	return false
}

func (x *AuthenticatorSelectionCriteria) GetUserVerification() AuthenticatorSelectionCriteria_UserVerificationRequirement {
	if x != nil {
		return x.UserVerification
	}
	return AuthenticatorSelectionCriteria_MISSING_USER_VERIFICATION_REQUIREMENT
}

type PublicKeyCredentialDescriptor struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id         []byte                                                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Transports []PublicKeyCredentialDescriptor_AuthenticatorTransport `protobuf:"varint,2,rep,packed,name=transports,proto3,enum=webauthn.PublicKeyCredentialDescriptor_AuthenticatorTransport" json:"transports,omitempty"`
	// Type is always "public-key".
	Type string `protobuf:"bytes,3,opt,name=type,proto3" json:"type,omitempty"`
}

func (x *PublicKeyCredentialDescriptor) Reset() {
	*x = PublicKeyCredentialDescriptor{}
	if protoimpl.UnsafeEnabled {
		mi := &file_webauthn_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PublicKeyCredentialDescriptor) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PublicKeyCredentialDescriptor) ProtoMessage() {}

func (x *PublicKeyCredentialDescriptor) ProtoReflect() protoreflect.Message {
	mi := &file_webauthn_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PublicKeyCredentialDescriptor.ProtoReflect.Descriptor instead.
func (*PublicKeyCredentialDescriptor) Descriptor() ([]byte, []int) {
	return file_webauthn_proto_rawDescGZIP(), []int{3}
}

func (x *PublicKeyCredentialDescriptor) GetId() []byte {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *PublicKeyCredentialDescriptor) GetTransports() []PublicKeyCredentialDescriptor_AuthenticatorTransport {
	if x != nil {
		return x.Transports
	}
	return nil
}

func (x *PublicKeyCredentialDescriptor) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

type PublicKeyCredentialParameters struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Actually a COSEAlgorithmIdentifier, not an integer.
	Alg int32 `protobuf:"varint,1,opt,name=alg,proto3" json:"alg,omitempty"`
	// Type is always "public-key".
	Type string `protobuf:"bytes,2,opt,name=type,proto3" json:"type,omitempty"`
}

func (x *PublicKeyCredentialParameters) Reset() {
	*x = PublicKeyCredentialParameters{}
	if protoimpl.UnsafeEnabled {
		mi := &file_webauthn_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PublicKeyCredentialParameters) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PublicKeyCredentialParameters) ProtoMessage() {}

func (x *PublicKeyCredentialParameters) ProtoReflect() protoreflect.Message {
	mi := &file_webauthn_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PublicKeyCredentialParameters.ProtoReflect.Descriptor instead.
func (*PublicKeyCredentialParameters) Descriptor() ([]byte, []int) {
	return file_webauthn_proto_rawDescGZIP(), []int{4}
}

func (x *PublicKeyCredentialParameters) GetAlg() int32 {
	if x != nil {
		return x.Alg
	}
	return 0
}

func (x *PublicKeyCredentialParameters) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

type PublicKeyCredentialRpEntity struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// URL to the icon, not the bytes of the icon.
	Icon string `protobuf:"bytes,2,opt,name=icon,proto3" json:"icon,omitempty"`
	Id   string `protobuf:"bytes,3,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *PublicKeyCredentialRpEntity) Reset() {
	*x = PublicKeyCredentialRpEntity{}
	if protoimpl.UnsafeEnabled {
		mi := &file_webauthn_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PublicKeyCredentialRpEntity) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PublicKeyCredentialRpEntity) ProtoMessage() {}

func (x *PublicKeyCredentialRpEntity) ProtoReflect() protoreflect.Message {
	mi := &file_webauthn_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PublicKeyCredentialRpEntity.ProtoReflect.Descriptor instead.
func (*PublicKeyCredentialRpEntity) Descriptor() ([]byte, []int) {
	return file_webauthn_proto_rawDescGZIP(), []int{5}
}

func (x *PublicKeyCredentialRpEntity) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *PublicKeyCredentialRpEntity) GetIcon() string {
	if x != nil {
		return x.Icon
	}
	return ""
}

func (x *PublicKeyCredentialRpEntity) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type PublicKeyCredentialUserEntity struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name        string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Icon        string `protobuf:"bytes,2,opt,name=icon,proto3" json:"icon,omitempty"`
	DisplayName string `protobuf:"bytes,3,opt,name=display_name,json=displayName,proto3" json:"display_name,omitempty"`
	Id          []byte `protobuf:"bytes,4,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *PublicKeyCredentialUserEntity) Reset() {
	*x = PublicKeyCredentialUserEntity{}
	if protoimpl.UnsafeEnabled {
		mi := &file_webauthn_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PublicKeyCredentialUserEntity) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PublicKeyCredentialUserEntity) ProtoMessage() {}

func (x *PublicKeyCredentialUserEntity) ProtoReflect() protoreflect.Message {
	mi := &file_webauthn_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PublicKeyCredentialUserEntity.ProtoReflect.Descriptor instead.
func (*PublicKeyCredentialUserEntity) Descriptor() ([]byte, []int) {
	return file_webauthn_proto_rawDescGZIP(), []int{6}
}

func (x *PublicKeyCredentialUserEntity) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *PublicKeyCredentialUserEntity) GetIcon() string {
	if x != nil {
		return x.Icon
	}
	return ""
}

func (x *PublicKeyCredentialUserEntity) GetDisplayName() string {
	if x != nil {
		return x.DisplayName
	}
	return ""
}

func (x *PublicKeyCredentialUserEntity) GetId() []byte {
	if x != nil {
		return x.Id
	}
	return nil
}

type PublicKeyCredential struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Type is always "public-key".
	Type     string                 `protobuf:"bytes,2,opt,name=type,proto3" json:"type,omitempty"`
	Response *AuthenticatorResponse `protobuf:"bytes,3,opt,name=response,proto3" json:"response,omitempty"`
}

func (x *PublicKeyCredential) Reset() {
	*x = PublicKeyCredential{}
	if protoimpl.UnsafeEnabled {
		mi := &file_webauthn_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PublicKeyCredential) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PublicKeyCredential) ProtoMessage() {}

func (x *PublicKeyCredential) ProtoReflect() protoreflect.Message {
	mi := &file_webauthn_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PublicKeyCredential.ProtoReflect.Descriptor instead.
func (*PublicKeyCredential) Descriptor() ([]byte, []int) {
	return file_webauthn_proto_rawDescGZIP(), []int{7}
}

func (x *PublicKeyCredential) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *PublicKeyCredential) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *PublicKeyCredential) GetResponse() *AuthenticatorResponse {
	if x != nil {
		return x.Response
	}
	return nil
}

type AuthenticatorResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ClientDataJson []byte `protobuf:"bytes,1,opt,name=client_data_json,json=clientDataJson,proto3" json:"client_data_json,omitempty"`
	// Types that are assignable to Response:
	//	*AuthenticatorResponse_AttestationResponse
	//	*AuthenticatorResponse_AssertionResponse
	Response isAuthenticatorResponse_Response `protobuf_oneof:"response"`
}

func (x *AuthenticatorResponse) Reset() {
	*x = AuthenticatorResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_webauthn_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AuthenticatorResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AuthenticatorResponse) ProtoMessage() {}

func (x *AuthenticatorResponse) ProtoReflect() protoreflect.Message {
	mi := &file_webauthn_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AuthenticatorResponse.ProtoReflect.Descriptor instead.
func (*AuthenticatorResponse) Descriptor() ([]byte, []int) {
	return file_webauthn_proto_rawDescGZIP(), []int{8}
}

func (x *AuthenticatorResponse) GetClientDataJson() []byte {
	if x != nil {
		return x.ClientDataJson
	}
	return nil
}

func (m *AuthenticatorResponse) GetResponse() isAuthenticatorResponse_Response {
	if m != nil {
		return m.Response
	}
	return nil
}

func (x *AuthenticatorResponse) GetAttestationResponse() *AuthenticatorAttestationResponse {
	if x, ok := x.GetResponse().(*AuthenticatorResponse_AttestationResponse); ok {
		return x.AttestationResponse
	}
	return nil
}

func (x *AuthenticatorResponse) GetAssertionResponse() *AuthenticatorAssertionResponse {
	if x, ok := x.GetResponse().(*AuthenticatorResponse_AssertionResponse); ok {
		return x.AssertionResponse
	}
	return nil
}

type isAuthenticatorResponse_Response interface {
	isAuthenticatorResponse_Response()
}

type AuthenticatorResponse_AttestationResponse struct {
	AttestationResponse *AuthenticatorAttestationResponse `protobuf:"bytes,2,opt,name=attestation_response,json=attestationResponse,proto3,oneof"`
}

type AuthenticatorResponse_AssertionResponse struct {
	AssertionResponse *AuthenticatorAssertionResponse `protobuf:"bytes,3,opt,name=assertion_response,json=assertionResponse,proto3,oneof"`
}

func (*AuthenticatorResponse_AttestationResponse) isAuthenticatorResponse_Response() {}

func (*AuthenticatorResponse_AssertionResponse) isAuthenticatorResponse_Response() {}

type AuthenticatorAttestationResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AttestationObject []byte `protobuf:"bytes,1,opt,name=attestation_object,json=attestationObject,proto3" json:"attestation_object,omitempty"`
}

func (x *AuthenticatorAttestationResponse) Reset() {
	*x = AuthenticatorAttestationResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_webauthn_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AuthenticatorAttestationResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AuthenticatorAttestationResponse) ProtoMessage() {}

func (x *AuthenticatorAttestationResponse) ProtoReflect() protoreflect.Message {
	mi := &file_webauthn_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AuthenticatorAttestationResponse.ProtoReflect.Descriptor instead.
func (*AuthenticatorAttestationResponse) Descriptor() ([]byte, []int) {
	return file_webauthn_proto_rawDescGZIP(), []int{9}
}

func (x *AuthenticatorAttestationResponse) GetAttestationObject() []byte {
	if x != nil {
		return x.AttestationObject
	}
	return nil
}

type AuthenticatorAssertionResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AuthenticatorData []byte `protobuf:"bytes,1,opt,name=authenticator_data,json=authenticatorData,proto3" json:"authenticator_data,omitempty"`
	Signature         []byte `protobuf:"bytes,2,opt,name=signature,proto3" json:"signature,omitempty"`
	UserHandle        []byte `protobuf:"bytes,3,opt,name=user_handle,json=userHandle,proto3" json:"user_handle,omitempty"`
}

func (x *AuthenticatorAssertionResponse) Reset() {
	*x = AuthenticatorAssertionResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_webauthn_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AuthenticatorAssertionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AuthenticatorAssertionResponse) ProtoMessage() {}

func (x *AuthenticatorAssertionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_webauthn_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AuthenticatorAssertionResponse.ProtoReflect.Descriptor instead.
func (*AuthenticatorAssertionResponse) Descriptor() ([]byte, []int) {
	return file_webauthn_proto_rawDescGZIP(), []int{10}
}

func (x *AuthenticatorAssertionResponse) GetAuthenticatorData() []byte {
	if x != nil {
		return x.AuthenticatorData
	}
	return nil
}

func (x *AuthenticatorAssertionResponse) GetSignature() []byte {
	if x != nil {
		return x.Signature
	}
	return nil
}

func (x *AuthenticatorAssertionResponse) GetUserHandle() []byte {
	if x != nil {
		return x.UserHandle
	}
	return nil
}

var File_webauthn_proto protoreflect.FileDescriptor

var file_webauthn_proto_rawDesc = []byte{
	0x0a, 0x0e, 0x77, 0x65, 0x62, 0x61, 0x75, 0x74, 0x68, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x12, 0x08, 0x77, 0x65, 0x62, 0x61, 0x75, 0x74, 0x68, 0x6e, 0x1a, 0x1e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x64, 0x75, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xb7, 0x05, 0x0a, 0x22, 0x50,
	0x75, 0x62, 0x6c, 0x69, 0x63, 0x4b, 0x65, 0x79, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69,
	0x61, 0x6c, 0x43, 0x72, 0x65, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x12, 0x6e, 0x0a, 0x0b, 0x61, 0x74, 0x74, 0x65, 0x73, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x4c, 0x2e, 0x77, 0x65, 0x62, 0x61, 0x75, 0x74, 0x68,
	0x6e, 0x2e, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x4b, 0x65, 0x79, 0x43, 0x72, 0x65, 0x64, 0x65,
	0x6e, 0x74, 0x69, 0x61, 0x6c, 0x43, 0x72, 0x65, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4f, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x41, 0x74, 0x74, 0x65, 0x73, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x43, 0x6f, 0x6e, 0x76, 0x65, 0x79, 0x61, 0x6e, 0x63, 0x65, 0x50, 0x72, 0x65, 0x66, 0x65, 0x72,
	0x65, 0x6e, 0x63, 0x65, 0x52, 0x0b, 0x61, 0x74, 0x74, 0x65, 0x73, 0x74, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x61, 0x0a, 0x17, 0x61, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74,
	0x6f, 0x72, 0x5f, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x28, 0x2e, 0x77, 0x65, 0x62, 0x61, 0x75, 0x74, 0x68, 0x6e, 0x2e, 0x41, 0x75,
	0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x6f, 0x72, 0x53, 0x65, 0x6c, 0x65, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x43, 0x72, 0x69, 0x74, 0x65, 0x72, 0x69, 0x61, 0x52, 0x16, 0x61, 0x75,
	0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x6f, 0x72, 0x53, 0x65, 0x6c, 0x65, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x09, 0x63, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e,
	0x67, 0x65, 0x12, 0x58, 0x0a, 0x13, 0x65, 0x78, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x5f, 0x63, 0x72,
	0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x27, 0x2e, 0x77, 0x65, 0x62, 0x61, 0x75, 0x74, 0x68, 0x6e, 0x2e, 0x50, 0x75, 0x62, 0x6c, 0x69,
	0x63, 0x4b, 0x65, 0x79, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x44, 0x65,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x6f, 0x72, 0x52, 0x12, 0x65, 0x78, 0x63, 0x6c, 0x75, 0x64,
	0x65, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x73, 0x12, 0x56, 0x0a, 0x13,
	0x70, 0x75, 0x62, 0x5f, 0x6b, 0x65, 0x79, 0x5f, 0x63, 0x72, 0x65, 0x64, 0x5f, 0x70, 0x61, 0x72,
	0x61, 0x6d, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x77, 0x65, 0x62, 0x61,
	0x75, 0x74, 0x68, 0x6e, 0x2e, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x4b, 0x65, 0x79, 0x43, 0x72,
	0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65,
	0x72, 0x73, 0x52, 0x10, 0x70, 0x75, 0x62, 0x4b, 0x65, 0x79, 0x43, 0x72, 0x65, 0x64, 0x50, 0x61,
	0x72, 0x61, 0x6d, 0x73, 0x12, 0x35, 0x0a, 0x02, 0x72, 0x70, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x25, 0x2e, 0x77, 0x65, 0x62, 0x61, 0x75, 0x74, 0x68, 0x6e, 0x2e, 0x50, 0x75, 0x62, 0x6c,
	0x69, 0x63, 0x4b, 0x65, 0x79, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x52,
	0x70, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x52, 0x02, 0x72, 0x70, 0x12, 0x33, 0x0a, 0x07, 0x74,
	0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44,
	0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x07, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74,
	0x12, 0x3b, 0x0a, 0x04, 0x75, 0x73, 0x65, 0x72, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27,
	0x2e, 0x77, 0x65, 0x62, 0x61, 0x75, 0x74, 0x68, 0x6e, 0x2e, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63,
	0x4b, 0x65, 0x79, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x55, 0x73, 0x65,
	0x72, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x52, 0x04, 0x75, 0x73, 0x65, 0x72, 0x22, 0x45, 0x0a,
	0x1f, 0x41, 0x74, 0x74, 0x65, 0x73, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x76,
	0x65, 0x79, 0x61, 0x6e, 0x63, 0x65, 0x50, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65,
	0x12, 0x08, 0x0a, 0x04, 0x4e, 0x4f, 0x4e, 0x45, 0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06, 0x44, 0x49,
	0x52, 0x45, 0x43, 0x54, 0x10, 0x01, 0x12, 0x0c, 0x0a, 0x08, 0x49, 0x4e, 0x44, 0x49, 0x52, 0x45,
	0x43, 0x54, 0x10, 0x02, 0x22, 0xd0, 0x01, 0x0a, 0x21, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x4b,
	0x65, 0x79, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x68,
	0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x09, 0x63,
	0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x12, 0x58, 0x0a, 0x13, 0x61, 0x6c, 0x6c, 0x6f,
	0x77, 0x65, 0x64, 0x5f, 0x63, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x73, 0x18,
	0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x77, 0x65, 0x62, 0x61, 0x75, 0x74, 0x68, 0x6e,
	0x2e, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x4b, 0x65, 0x79, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e,
	0x74, 0x69, 0x61, 0x6c, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x6f, 0x72, 0x52, 0x12,
	0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61,
	0x6c, 0x73, 0x12, 0x33, 0x0a, 0x07, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x07,
	0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x22, 0x9d, 0x04, 0x0a, 0x1e, 0x41, 0x75, 0x74, 0x68,
	0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x6f, 0x72, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x43, 0x72, 0x69, 0x74, 0x65, 0x72, 0x69, 0x61, 0x12, 0x7b, 0x0a, 0x18, 0x61, 0x75,
	0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x61, 0x74, 0x74, 0x61,
	0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x40, 0x2e, 0x77,
	0x65, 0x62, 0x61, 0x75, 0x74, 0x68, 0x6e, 0x2e, 0x41, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69,
	0x63, 0x61, 0x74, 0x6f, 0x72, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x72,
	0x69, 0x74, 0x65, 0x72, 0x69, 0x61, 0x2e, 0x41, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63,
	0x61, 0x74, 0x6f, 0x72, 0x41, 0x74, 0x74, 0x61, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x17,
	0x61, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x6f, 0x72, 0x41, 0x74, 0x74,
	0x61, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x30, 0x0a, 0x14, 0x72, 0x65, 0x71, 0x75, 0x69,
	0x72, 0x65, 0x5f, 0x72, 0x65, 0x73, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x5f, 0x6b, 0x65, 0x79, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x12, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x52, 0x65,
	0x73, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x4b, 0x65, 0x79, 0x12, 0x71, 0x0a, 0x11, 0x75, 0x73, 0x65,
	0x72, 0x5f, 0x76, 0x65, 0x72, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x44, 0x2e, 0x77, 0x65, 0x62, 0x61, 0x75, 0x74, 0x68, 0x6e, 0x2e,
	0x41, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x6f, 0x72, 0x53, 0x65, 0x6c,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x72, 0x69, 0x74, 0x65, 0x72, 0x69, 0x61, 0x2e, 0x55,
	0x73, 0x65, 0x72, 0x56, 0x65, 0x72, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x10, 0x75, 0x73, 0x65, 0x72,
	0x56, 0x65, 0x72, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x61, 0x0a, 0x17,
	0x41, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x6f, 0x72, 0x41, 0x74, 0x74,
	0x61, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x24, 0x0a, 0x20, 0x4d, 0x49, 0x53, 0x53, 0x49,
	0x4e, 0x47, 0x5f, 0x41, 0x55, 0x54, 0x48, 0x45, 0x4e, 0x54, 0x49, 0x43, 0x41, 0x54, 0x4f, 0x52,
	0x5f, 0x41, 0x54, 0x54, 0x41, 0x43, 0x48, 0x4d, 0x45, 0x4e, 0x54, 0x10, 0x00, 0x12, 0x12, 0x0a,
	0x0e, 0x43, 0x52, 0x4f, 0x53, 0x53, 0x5f, 0x50, 0x4c, 0x41, 0x54, 0x46, 0x4f, 0x52, 0x4d, 0x10,
	0x01, 0x12, 0x0c, 0x0a, 0x08, 0x50, 0x4c, 0x41, 0x54, 0x46, 0x4f, 0x52, 0x4d, 0x10, 0x02, 0x22,
	0x76, 0x0a, 0x1b, 0x55, 0x73, 0x65, 0x72, 0x56, 0x65, 0x72, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x29,
	0x0a, 0x25, 0x4d, 0x49, 0x53, 0x53, 0x49, 0x4e, 0x47, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x56,
	0x45, 0x52, 0x49, 0x46, 0x49, 0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x52, 0x45, 0x51, 0x55,
	0x49, 0x52, 0x45, 0x4d, 0x45, 0x4e, 0x54, 0x10, 0x00, 0x12, 0x0f, 0x0a, 0x0b, 0x44, 0x49, 0x53,
	0x43, 0x4f, 0x55, 0x52, 0x41, 0x47, 0x45, 0x44, 0x10, 0x01, 0x12, 0x0d, 0x0a, 0x09, 0x50, 0x52,
	0x45, 0x46, 0x45, 0x52, 0x52, 0x45, 0x44, 0x10, 0x02, 0x12, 0x0c, 0x0a, 0x08, 0x52, 0x45, 0x51,
	0x55, 0x49, 0x52, 0x45, 0x44, 0x10, 0x03, 0x22, 0x8b, 0x02, 0x0a, 0x1d, 0x50, 0x75, 0x62, 0x6c,
	0x69, 0x63, 0x4b, 0x65, 0x79, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x44,
	0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x6f, 0x72, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x02, 0x69, 0x64, 0x12, 0x5e, 0x0a, 0x0a, 0x74, 0x72, 0x61,
	0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x3e, 0x2e,
	0x77, 0x65, 0x62, 0x61, 0x75, 0x74, 0x68, 0x6e, 0x2e, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x4b,
	0x65, 0x79, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x44, 0x65, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x6f, 0x72, 0x2e, 0x41, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63,
	0x61, 0x74, 0x6f, 0x72, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x0a, 0x74,
	0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x22, 0x66, 0x0a,
	0x16, 0x41, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x6f, 0x72, 0x54, 0x72,
	0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x23, 0x0a, 0x1f, 0x4d, 0x49, 0x53, 0x53, 0x49,
	0x4e, 0x47, 0x5f, 0x41, 0x55, 0x54, 0x48, 0x45, 0x4e, 0x54, 0x49, 0x43, 0x41, 0x54, 0x4f, 0x52,
	0x5f, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x50, 0x4f, 0x52, 0x54, 0x10, 0x00, 0x12, 0x07, 0x0a, 0x03,
	0x42, 0x4c, 0x45, 0x10, 0x01, 0x12, 0x0c, 0x0a, 0x08, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x4e, 0x41,
	0x4c, 0x10, 0x02, 0x12, 0x07, 0x0a, 0x03, 0x4e, 0x46, 0x43, 0x10, 0x03, 0x12, 0x07, 0x0a, 0x03,
	0x55, 0x53, 0x42, 0x10, 0x04, 0x22, 0x45, 0x0a, 0x1d, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x4b,
	0x65, 0x79, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x50, 0x61, 0x72, 0x61,
	0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x12, 0x10, 0x0a, 0x03, 0x61, 0x6c, 0x67, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x03, 0x61, 0x6c, 0x67, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x22, 0x55, 0x0a, 0x1b,
	0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x4b, 0x65, 0x79, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74,
	0x69, 0x61, 0x6c, 0x52, 0x70, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12,
	0x12, 0x0a, 0x04, 0x69, 0x63, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x69,
	0x63, 0x6f, 0x6e, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x02, 0x69, 0x64, 0x22, 0x7a, 0x0a, 0x1d, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x4b, 0x65, 0x79,
	0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x55, 0x73, 0x65, 0x72, 0x45, 0x6e,
	0x74, 0x69, 0x74, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x69, 0x63, 0x6f, 0x6e,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x69, 0x63, 0x6f, 0x6e, 0x12, 0x21, 0x0a, 0x0c,
	0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0b, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x02, 0x69, 0x64, 0x22,
	0x76, 0x0a, 0x13, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x4b, 0x65, 0x79, 0x43, 0x72, 0x65, 0x64,
	0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x3b, 0x0a, 0x08, 0x72, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x77,
	0x65, 0x62, 0x61, 0x75, 0x74, 0x68, 0x6e, 0x2e, 0x41, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69,
	0x63, 0x61, 0x74, 0x6f, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x08, 0x72,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x89, 0x02, 0x0a, 0x15, 0x41, 0x75, 0x74, 0x68,
	0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x6f, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x28, 0x0a, 0x10, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x64, 0x61, 0x74, 0x61,
	0x5f, 0x6a, 0x73, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0e, 0x63, 0x6c, 0x69,
	0x65, 0x6e, 0x74, 0x44, 0x61, 0x74, 0x61, 0x4a, 0x73, 0x6f, 0x6e, 0x12, 0x5f, 0x0a, 0x14, 0x61,
	0x74, 0x74, 0x65, 0x73, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x77, 0x65, 0x62, 0x61,
	0x75, 0x74, 0x68, 0x6e, 0x2e, 0x41, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74,
	0x6f, 0x72, 0x41, 0x74, 0x74, 0x65, 0x73, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48, 0x00, 0x52, 0x13, 0x61, 0x74, 0x74, 0x65, 0x73, 0x74, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x59, 0x0a, 0x12,
	0x61, 0x73, 0x73, 0x65, 0x72, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x77, 0x65, 0x62, 0x61, 0x75,
	0x74, 0x68, 0x6e, 0x2e, 0x41, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x6f,
	0x72, 0x41, 0x73, 0x73, 0x65, 0x72, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x48, 0x00, 0x52, 0x11, 0x61, 0x73, 0x73, 0x65, 0x72, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42, 0x0a, 0x0a, 0x08, 0x72, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x51, 0x0a, 0x20, 0x41, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63,
	0x61, 0x74, 0x6f, 0x72, 0x41, 0x74, 0x74, 0x65, 0x73, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2d, 0x0a, 0x12, 0x61, 0x74, 0x74, 0x65, 0x73,
	0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0c, 0x52, 0x11, 0x61, 0x74, 0x74, 0x65, 0x73, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x22, 0x8e, 0x01, 0x0a, 0x1e, 0x41, 0x75, 0x74, 0x68, 0x65,
	0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x6f, 0x72, 0x41, 0x73, 0x73, 0x65, 0x72, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2d, 0x0a, 0x12, 0x61, 0x75, 0x74,
	0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x11, 0x61, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63,
	0x61, 0x74, 0x6f, 0x72, 0x44, 0x61, 0x74, 0x61, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x69, 0x67, 0x6e,
	0x61, 0x74, 0x75, 0x72, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x09, 0x73, 0x69, 0x67,
	0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x68,
	0x61, 0x6e, 0x64, 0x6c, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0a, 0x75, 0x73, 0x65,
	0x72, 0x48, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x42, 0x2a, 0x5a, 0x28, 0x67, 0x69, 0x74, 0x68, 0x75,
	0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x6a, 0x72, 0x6f, 0x63, 0x6b, 0x77, 0x61, 0x79, 0x2f, 0x6a,
	0x73, 0x73, 0x6f, 0x32, 0x2f, 0x70, 0x6b, 0x67, 0x2f, 0x77, 0x65, 0x62, 0x61, 0x75, 0x74, 0x68,
	0x6e, 0x70, 0x62, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_webauthn_proto_rawDescOnce sync.Once
	file_webauthn_proto_rawDescData = file_webauthn_proto_rawDesc
)

func file_webauthn_proto_rawDescGZIP() []byte {
	file_webauthn_proto_rawDescOnce.Do(func() {
		file_webauthn_proto_rawDescData = protoimpl.X.CompressGZIP(file_webauthn_proto_rawDescData)
	})
	return file_webauthn_proto_rawDescData
}

var file_webauthn_proto_enumTypes = make([]protoimpl.EnumInfo, 4)
var file_webauthn_proto_msgTypes = make([]protoimpl.MessageInfo, 11)
var file_webauthn_proto_goTypes = []interface{}{
	(PublicKeyCredentialCreationOptions_AttestationConveyancePreference)(0), // 0: webauthn.PublicKeyCredentialCreationOptions.AttestationConveyancePreference
	(AuthenticatorSelectionCriteria_AuthenticatorAttachment)(0),             // 1: webauthn.AuthenticatorSelectionCriteria.AuthenticatorAttachment
	(AuthenticatorSelectionCriteria_UserVerificationRequirement)(0),         // 2: webauthn.AuthenticatorSelectionCriteria.UserVerificationRequirement
	(PublicKeyCredentialDescriptor_AuthenticatorTransport)(0),               // 3: webauthn.PublicKeyCredentialDescriptor.AuthenticatorTransport
	(*PublicKeyCredentialCreationOptions)(nil),                              // 4: webauthn.PublicKeyCredentialCreationOptions
	(*PublicKeyCredentialRequestOptions)(nil),                               // 5: webauthn.PublicKeyCredentialRequestOptions
	(*AuthenticatorSelectionCriteria)(nil),                                  // 6: webauthn.AuthenticatorSelectionCriteria
	(*PublicKeyCredentialDescriptor)(nil),                                   // 7: webauthn.PublicKeyCredentialDescriptor
	(*PublicKeyCredentialParameters)(nil),                                   // 8: webauthn.PublicKeyCredentialParameters
	(*PublicKeyCredentialRpEntity)(nil),                                     // 9: webauthn.PublicKeyCredentialRpEntity
	(*PublicKeyCredentialUserEntity)(nil),                                   // 10: webauthn.PublicKeyCredentialUserEntity
	(*PublicKeyCredential)(nil),                                             // 11: webauthn.PublicKeyCredential
	(*AuthenticatorResponse)(nil),                                           // 12: webauthn.AuthenticatorResponse
	(*AuthenticatorAttestationResponse)(nil),                                // 13: webauthn.AuthenticatorAttestationResponse
	(*AuthenticatorAssertionResponse)(nil),                                  // 14: webauthn.AuthenticatorAssertionResponse
	(*duration.Duration)(nil),                                               // 15: google.protobuf.Duration
}
var file_webauthn_proto_depIdxs = []int32{
	0,  // 0: webauthn.PublicKeyCredentialCreationOptions.attestation:type_name -> webauthn.PublicKeyCredentialCreationOptions.AttestationConveyancePreference
	6,  // 1: webauthn.PublicKeyCredentialCreationOptions.authenticator_selection:type_name -> webauthn.AuthenticatorSelectionCriteria
	7,  // 2: webauthn.PublicKeyCredentialCreationOptions.exclude_credentials:type_name -> webauthn.PublicKeyCredentialDescriptor
	8,  // 3: webauthn.PublicKeyCredentialCreationOptions.pub_key_cred_params:type_name -> webauthn.PublicKeyCredentialParameters
	9,  // 4: webauthn.PublicKeyCredentialCreationOptions.rp:type_name -> webauthn.PublicKeyCredentialRpEntity
	15, // 5: webauthn.PublicKeyCredentialCreationOptions.timeout:type_name -> google.protobuf.Duration
	10, // 6: webauthn.PublicKeyCredentialCreationOptions.user:type_name -> webauthn.PublicKeyCredentialUserEntity
	7,  // 7: webauthn.PublicKeyCredentialRequestOptions.allowed_credentials:type_name -> webauthn.PublicKeyCredentialDescriptor
	15, // 8: webauthn.PublicKeyCredentialRequestOptions.timeout:type_name -> google.protobuf.Duration
	1,  // 9: webauthn.AuthenticatorSelectionCriteria.authenticator_attachment:type_name -> webauthn.AuthenticatorSelectionCriteria.AuthenticatorAttachment
	2,  // 10: webauthn.AuthenticatorSelectionCriteria.user_verification:type_name -> webauthn.AuthenticatorSelectionCriteria.UserVerificationRequirement
	3,  // 11: webauthn.PublicKeyCredentialDescriptor.transports:type_name -> webauthn.PublicKeyCredentialDescriptor.AuthenticatorTransport
	12, // 12: webauthn.PublicKeyCredential.response:type_name -> webauthn.AuthenticatorResponse
	13, // 13: webauthn.AuthenticatorResponse.attestation_response:type_name -> webauthn.AuthenticatorAttestationResponse
	14, // 14: webauthn.AuthenticatorResponse.assertion_response:type_name -> webauthn.AuthenticatorAssertionResponse
	15, // [15:15] is the sub-list for method output_type
	15, // [15:15] is the sub-list for method input_type
	15, // [15:15] is the sub-list for extension type_name
	15, // [15:15] is the sub-list for extension extendee
	0,  // [0:15] is the sub-list for field type_name
}

func init() { file_webauthn_proto_init() }
func file_webauthn_proto_init() {
	if File_webauthn_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_webauthn_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PublicKeyCredentialCreationOptions); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_webauthn_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PublicKeyCredentialRequestOptions); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_webauthn_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AuthenticatorSelectionCriteria); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_webauthn_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PublicKeyCredentialDescriptor); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_webauthn_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PublicKeyCredentialParameters); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_webauthn_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PublicKeyCredentialRpEntity); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_webauthn_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PublicKeyCredentialUserEntity); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_webauthn_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PublicKeyCredential); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_webauthn_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AuthenticatorResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_webauthn_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AuthenticatorAttestationResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_webauthn_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AuthenticatorAssertionResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_webauthn_proto_msgTypes[8].OneofWrappers = []interface{}{
		(*AuthenticatorResponse_AttestationResponse)(nil),
		(*AuthenticatorResponse_AssertionResponse)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_webauthn_proto_rawDesc,
			NumEnums:      4,
			NumMessages:   11,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_webauthn_proto_goTypes,
		DependencyIndexes: file_webauthn_proto_depIdxs,
		EnumInfos:         file_webauthn_proto_enumTypes,
		MessageInfos:      file_webauthn_proto_msgTypes,
	}.Build()
	File_webauthn_proto = out.File
	file_webauthn_proto_rawDesc = nil
	file_webauthn_proto_goTypes = nil
	file_webauthn_proto_depIdxs = nil
}
